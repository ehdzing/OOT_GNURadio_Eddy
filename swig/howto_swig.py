# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_howto_swig')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_howto_swig')
    _howto_swig = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_howto_swig', [dirname(__file__)])
        except ImportError:
            import _howto_swig
            return _howto_swig
        try:
            _mod = imp.load_module('_howto_swig', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _howto_swig = swig_import_helper()
    del swig_import_helper
else:
    import _howto_swig
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _howto_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _howto_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _howto_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _howto_swig.high_res_timer_epoch()
class square_ff(object):
    """Proxy of C++ gr::howto::square_ff class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make():
        """make() -> square_ff_sptr"""
        return _howto_swig.square_ff_make()

    make = staticmethod(make)
    __swig_destroy__ = _howto_swig.delete_square_ff
    __del__ = lambda self: None
square_ff_swigregister = _howto_swig.square_ff_swigregister
square_ff_swigregister(square_ff)

def square_ff_make():
    """square_ff_make() -> square_ff_sptr"""
    return _howto_swig.square_ff_make()

class square_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::howto::square_ff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::howto::square_ff)> self) -> square_ff_sptr
        __init__(boost::shared_ptr<(gr::howto::square_ff)> self, square_ff p) -> square_ff_sptr
        """
        this = _howto_swig.new_square_ff_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(square_ff_sptr self) -> square_ff"""
        return _howto_swig.square_ff_sptr___deref__(self)

    __swig_destroy__ = _howto_swig.delete_square_ff_sptr
    __del__ = lambda self: None

    def make(self):
        """make(square_ff_sptr self) -> square_ff_sptr"""
        return _howto_swig.square_ff_sptr_make(self)


    def history(self):
        """history(square_ff_sptr self) -> unsigned int"""
        return _howto_swig.square_ff_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(square_ff_sptr self, int which, int delay)
        declare_sample_delay(square_ff_sptr self, unsigned int delay)
        """
        return _howto_swig.square_ff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(square_ff_sptr self, int which) -> unsigned int"""
        return _howto_swig.square_ff_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(square_ff_sptr self) -> int"""
        return _howto_swig.square_ff_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(square_ff_sptr self) -> double"""
        return _howto_swig.square_ff_sptr_relative_rate(self)


    def start(self):
        """start(square_ff_sptr self) -> bool"""
        return _howto_swig.square_ff_sptr_start(self)


    def stop(self):
        """stop(square_ff_sptr self) -> bool"""
        return _howto_swig.square_ff_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(square_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _howto_swig.square_ff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(square_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _howto_swig.square_ff_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(square_ff_sptr self) -> int"""
        return _howto_swig.square_ff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(square_ff_sptr self, int m)"""
        return _howto_swig.square_ff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(square_ff_sptr self)"""
        return _howto_swig.square_ff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(square_ff_sptr self) -> bool"""
        return _howto_swig.square_ff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(square_ff_sptr self, int m)"""
        return _howto_swig.square_ff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(square_ff_sptr self) -> int"""
        return _howto_swig.square_ff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(square_ff_sptr self, int i) -> long"""
        return _howto_swig.square_ff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(square_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(square_ff_sptr self, int port, long max_output_buffer)
        """
        return _howto_swig.square_ff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(square_ff_sptr self, int i) -> long"""
        return _howto_swig.square_ff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(square_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(square_ff_sptr self, int port, long min_output_buffer)
        """
        return _howto_swig.square_ff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(square_ff_sptr self) -> float"""
        return _howto_swig.square_ff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(square_ff_sptr self) -> float"""
        return _howto_swig.square_ff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(square_ff_sptr self) -> float"""
        return _howto_swig.square_ff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(square_ff_sptr self) -> float"""
        return _howto_swig.square_ff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(square_ff_sptr self) -> float"""
        return _howto_swig.square_ff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(square_ff_sptr self) -> float"""
        return _howto_swig.square_ff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(square_ff_sptr self, int which) -> float
        pc_input_buffers_full(square_ff_sptr self) -> pmt_vector_float
        """
        return _howto_swig.square_ff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(square_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(square_ff_sptr self) -> pmt_vector_float
        """
        return _howto_swig.square_ff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(square_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(square_ff_sptr self) -> pmt_vector_float
        """
        return _howto_swig.square_ff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(square_ff_sptr self, int which) -> float
        pc_output_buffers_full(square_ff_sptr self) -> pmt_vector_float
        """
        return _howto_swig.square_ff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(square_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(square_ff_sptr self) -> pmt_vector_float
        """
        return _howto_swig.square_ff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(square_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(square_ff_sptr self) -> pmt_vector_float
        """
        return _howto_swig.square_ff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(square_ff_sptr self) -> float"""
        return _howto_swig.square_ff_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(square_ff_sptr self) -> float"""
        return _howto_swig.square_ff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(square_ff_sptr self) -> float"""
        return _howto_swig.square_ff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(square_ff_sptr self) -> float"""
        return _howto_swig.square_ff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(square_ff_sptr self) -> float"""
        return _howto_swig.square_ff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(square_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _howto_swig.square_ff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(square_ff_sptr self)"""
        return _howto_swig.square_ff_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(square_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _howto_swig.square_ff_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(square_ff_sptr self) -> int"""
        return _howto_swig.square_ff_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(square_ff_sptr self) -> int"""
        return _howto_swig.square_ff_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(square_ff_sptr self, int priority) -> int"""
        return _howto_swig.square_ff_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(square_ff_sptr self) -> std::string"""
        return _howto_swig.square_ff_sptr_name(self)


    def symbol_name(self):
        """symbol_name(square_ff_sptr self) -> std::string"""
        return _howto_swig.square_ff_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(square_ff_sptr self) -> io_signature_sptr"""
        return _howto_swig.square_ff_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(square_ff_sptr self) -> io_signature_sptr"""
        return _howto_swig.square_ff_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(square_ff_sptr self) -> long"""
        return _howto_swig.square_ff_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(square_ff_sptr self) -> basic_block_sptr"""
        return _howto_swig.square_ff_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(square_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _howto_swig.square_ff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(square_ff_sptr self) -> std::string"""
        return _howto_swig.square_ff_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(square_ff_sptr self, std::string name)"""
        return _howto_swig.square_ff_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(square_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _howto_swig.square_ff_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(square_ff_sptr self) -> swig_int_ptr"""
        return _howto_swig.square_ff_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(square_ff_sptr self) -> swig_int_ptr"""
        return _howto_swig.square_ff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(square_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _howto_swig.square_ff_sptr_message_subscribers(self, which_port)

square_ff_sptr_swigregister = _howto_swig.square_ff_sptr_swigregister
square_ff_sptr_swigregister(square_ff_sptr)


square_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
square_ff = square_ff.make;

class gain_ff(object):
    """Proxy of C++ gr::howto::gain_ff class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(gain=1.0):
        """make(float gain=1.0) -> gain_ff_sptr"""
        return _howto_swig.gain_ff_make(gain)

    make = staticmethod(make)

    def set_gain(self, gain):
        """set_gain(gain_ff self, float gain)"""
        return _howto_swig.gain_ff_set_gain(self, gain)


    def gain(self):
        """gain(gain_ff self) -> float"""
        return _howto_swig.gain_ff_gain(self)

    __swig_destroy__ = _howto_swig.delete_gain_ff
    __del__ = lambda self: None
gain_ff_swigregister = _howto_swig.gain_ff_swigregister
gain_ff_swigregister(gain_ff)

def gain_ff_make(gain=1.0):
    """gain_ff_make(float gain=1.0) -> gain_ff_sptr"""
    return _howto_swig.gain_ff_make(gain)

class gain_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::howto::gain_ff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::howto::gain_ff)> self) -> gain_ff_sptr
        __init__(boost::shared_ptr<(gr::howto::gain_ff)> self, gain_ff p) -> gain_ff_sptr
        """
        this = _howto_swig.new_gain_ff_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(gain_ff_sptr self) -> gain_ff"""
        return _howto_swig.gain_ff_sptr___deref__(self)

    __swig_destroy__ = _howto_swig.delete_gain_ff_sptr
    __del__ = lambda self: None

    def make(self, gain=1.0):
        """make(gain_ff_sptr self, float gain=1.0) -> gain_ff_sptr"""
        return _howto_swig.gain_ff_sptr_make(self, gain)


    def set_gain(self, gain):
        """set_gain(gain_ff_sptr self, float gain)"""
        return _howto_swig.gain_ff_sptr_set_gain(self, gain)


    def gain(self):
        """gain(gain_ff_sptr self) -> float"""
        return _howto_swig.gain_ff_sptr_gain(self)


    def history(self):
        """history(gain_ff_sptr self) -> unsigned int"""
        return _howto_swig.gain_ff_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(gain_ff_sptr self, int which, int delay)
        declare_sample_delay(gain_ff_sptr self, unsigned int delay)
        """
        return _howto_swig.gain_ff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(gain_ff_sptr self, int which) -> unsigned int"""
        return _howto_swig.gain_ff_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(gain_ff_sptr self) -> int"""
        return _howto_swig.gain_ff_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(gain_ff_sptr self) -> double"""
        return _howto_swig.gain_ff_sptr_relative_rate(self)


    def start(self):
        """start(gain_ff_sptr self) -> bool"""
        return _howto_swig.gain_ff_sptr_start(self)


    def stop(self):
        """stop(gain_ff_sptr self) -> bool"""
        return _howto_swig.gain_ff_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(gain_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _howto_swig.gain_ff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(gain_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _howto_swig.gain_ff_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(gain_ff_sptr self) -> int"""
        return _howto_swig.gain_ff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(gain_ff_sptr self, int m)"""
        return _howto_swig.gain_ff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(gain_ff_sptr self)"""
        return _howto_swig.gain_ff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(gain_ff_sptr self) -> bool"""
        return _howto_swig.gain_ff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(gain_ff_sptr self, int m)"""
        return _howto_swig.gain_ff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(gain_ff_sptr self) -> int"""
        return _howto_swig.gain_ff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(gain_ff_sptr self, int i) -> long"""
        return _howto_swig.gain_ff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(gain_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(gain_ff_sptr self, int port, long max_output_buffer)
        """
        return _howto_swig.gain_ff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(gain_ff_sptr self, int i) -> long"""
        return _howto_swig.gain_ff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(gain_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(gain_ff_sptr self, int port, long min_output_buffer)
        """
        return _howto_swig.gain_ff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(gain_ff_sptr self) -> float"""
        return _howto_swig.gain_ff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(gain_ff_sptr self) -> float"""
        return _howto_swig.gain_ff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(gain_ff_sptr self) -> float"""
        return _howto_swig.gain_ff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(gain_ff_sptr self) -> float"""
        return _howto_swig.gain_ff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(gain_ff_sptr self) -> float"""
        return _howto_swig.gain_ff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(gain_ff_sptr self) -> float"""
        return _howto_swig.gain_ff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(gain_ff_sptr self, int which) -> float
        pc_input_buffers_full(gain_ff_sptr self) -> pmt_vector_float
        """
        return _howto_swig.gain_ff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(gain_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(gain_ff_sptr self) -> pmt_vector_float
        """
        return _howto_swig.gain_ff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(gain_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(gain_ff_sptr self) -> pmt_vector_float
        """
        return _howto_swig.gain_ff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(gain_ff_sptr self, int which) -> float
        pc_output_buffers_full(gain_ff_sptr self) -> pmt_vector_float
        """
        return _howto_swig.gain_ff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(gain_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(gain_ff_sptr self) -> pmt_vector_float
        """
        return _howto_swig.gain_ff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(gain_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(gain_ff_sptr self) -> pmt_vector_float
        """
        return _howto_swig.gain_ff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(gain_ff_sptr self) -> float"""
        return _howto_swig.gain_ff_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(gain_ff_sptr self) -> float"""
        return _howto_swig.gain_ff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(gain_ff_sptr self) -> float"""
        return _howto_swig.gain_ff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(gain_ff_sptr self) -> float"""
        return _howto_swig.gain_ff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(gain_ff_sptr self) -> float"""
        return _howto_swig.gain_ff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(gain_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _howto_swig.gain_ff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(gain_ff_sptr self)"""
        return _howto_swig.gain_ff_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(gain_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _howto_swig.gain_ff_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(gain_ff_sptr self) -> int"""
        return _howto_swig.gain_ff_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(gain_ff_sptr self) -> int"""
        return _howto_swig.gain_ff_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(gain_ff_sptr self, int priority) -> int"""
        return _howto_swig.gain_ff_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(gain_ff_sptr self) -> std::string"""
        return _howto_swig.gain_ff_sptr_name(self)


    def symbol_name(self):
        """symbol_name(gain_ff_sptr self) -> std::string"""
        return _howto_swig.gain_ff_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(gain_ff_sptr self) -> io_signature_sptr"""
        return _howto_swig.gain_ff_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(gain_ff_sptr self) -> io_signature_sptr"""
        return _howto_swig.gain_ff_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(gain_ff_sptr self) -> long"""
        return _howto_swig.gain_ff_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(gain_ff_sptr self) -> basic_block_sptr"""
        return _howto_swig.gain_ff_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(gain_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _howto_swig.gain_ff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(gain_ff_sptr self) -> std::string"""
        return _howto_swig.gain_ff_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(gain_ff_sptr self, std::string name)"""
        return _howto_swig.gain_ff_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(gain_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _howto_swig.gain_ff_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(gain_ff_sptr self) -> swig_int_ptr"""
        return _howto_swig.gain_ff_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(gain_ff_sptr self) -> swig_int_ptr"""
        return _howto_swig.gain_ff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(gain_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _howto_swig.gain_ff_sptr_message_subscribers(self, which_port)

gain_ff_sptr_swigregister = _howto_swig.gain_ff_sptr_swigregister
gain_ff_sptr_swigregister(gain_ff_sptr)


gain_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
gain_ff = gain_ff.make;

class moving_avg_ff(object):
    """Proxy of C++ gr::howto::moving_avg_ff class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(length, scale=1.0):
        """make(int length, float scale=1.0) -> moving_avg_ff_sptr"""
        return _howto_swig.moving_avg_ff_make(length, scale)

    make = staticmethod(make)

    def set_length(self, length):
        """set_length(moving_avg_ff self, int length)"""
        return _howto_swig.moving_avg_ff_set_length(self, length)


    def length(self):
        """
        length(moving_avg_ff self) -> int

        Return the number of elements in v.
        """
        return _howto_swig.moving_avg_ff_length(self)


    def set_scale(self, scale):
        """set_scale(moving_avg_ff self, float scale)"""
        return _howto_swig.moving_avg_ff_set_scale(self, scale)


    def scale(self):
        """scale(moving_avg_ff self) -> float"""
        return _howto_swig.moving_avg_ff_scale(self)

    __swig_destroy__ = _howto_swig.delete_moving_avg_ff
    __del__ = lambda self: None
moving_avg_ff_swigregister = _howto_swig.moving_avg_ff_swigregister
moving_avg_ff_swigregister(moving_avg_ff)

def moving_avg_ff_make(length, scale=1.0):
    """moving_avg_ff_make(int length, float scale=1.0) -> moving_avg_ff_sptr"""
    return _howto_swig.moving_avg_ff_make(length, scale)

class moving_avg_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::howto::moving_avg_ff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::howto::moving_avg_ff)> self) -> moving_avg_ff_sptr
        __init__(boost::shared_ptr<(gr::howto::moving_avg_ff)> self, moving_avg_ff p) -> moving_avg_ff_sptr
        """
        this = _howto_swig.new_moving_avg_ff_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(moving_avg_ff_sptr self) -> moving_avg_ff"""
        return _howto_swig.moving_avg_ff_sptr___deref__(self)

    __swig_destroy__ = _howto_swig.delete_moving_avg_ff_sptr
    __del__ = lambda self: None

    def make(self, length, scale=1.0):
        """make(moving_avg_ff_sptr self, int length, float scale=1.0) -> moving_avg_ff_sptr"""
        return _howto_swig.moving_avg_ff_sptr_make(self, length, scale)


    def set_length(self, length):
        """set_length(moving_avg_ff_sptr self, int length)"""
        return _howto_swig.moving_avg_ff_sptr_set_length(self, length)


    def length(self):
        """
        length(moving_avg_ff_sptr self) -> int

        Return the number of elements in v.
        """
        return _howto_swig.moving_avg_ff_sptr_length(self)


    def set_scale(self, scale):
        """set_scale(moving_avg_ff_sptr self, float scale)"""
        return _howto_swig.moving_avg_ff_sptr_set_scale(self, scale)


    def scale(self):
        """scale(moving_avg_ff_sptr self) -> float"""
        return _howto_swig.moving_avg_ff_sptr_scale(self)


    def history(self):
        """history(moving_avg_ff_sptr self) -> unsigned int"""
        return _howto_swig.moving_avg_ff_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(moving_avg_ff_sptr self, int which, int delay)
        declare_sample_delay(moving_avg_ff_sptr self, unsigned int delay)
        """
        return _howto_swig.moving_avg_ff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(moving_avg_ff_sptr self, int which) -> unsigned int"""
        return _howto_swig.moving_avg_ff_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(moving_avg_ff_sptr self) -> int"""
        return _howto_swig.moving_avg_ff_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(moving_avg_ff_sptr self) -> double"""
        return _howto_swig.moving_avg_ff_sptr_relative_rate(self)


    def start(self):
        """start(moving_avg_ff_sptr self) -> bool"""
        return _howto_swig.moving_avg_ff_sptr_start(self)


    def stop(self):
        """stop(moving_avg_ff_sptr self) -> bool"""
        return _howto_swig.moving_avg_ff_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(moving_avg_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _howto_swig.moving_avg_ff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(moving_avg_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _howto_swig.moving_avg_ff_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(moving_avg_ff_sptr self) -> int"""
        return _howto_swig.moving_avg_ff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(moving_avg_ff_sptr self, int m)"""
        return _howto_swig.moving_avg_ff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(moving_avg_ff_sptr self)"""
        return _howto_swig.moving_avg_ff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(moving_avg_ff_sptr self) -> bool"""
        return _howto_swig.moving_avg_ff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(moving_avg_ff_sptr self, int m)"""
        return _howto_swig.moving_avg_ff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(moving_avg_ff_sptr self) -> int"""
        return _howto_swig.moving_avg_ff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(moving_avg_ff_sptr self, int i) -> long"""
        return _howto_swig.moving_avg_ff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(moving_avg_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(moving_avg_ff_sptr self, int port, long max_output_buffer)
        """
        return _howto_swig.moving_avg_ff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(moving_avg_ff_sptr self, int i) -> long"""
        return _howto_swig.moving_avg_ff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(moving_avg_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(moving_avg_ff_sptr self, int port, long min_output_buffer)
        """
        return _howto_swig.moving_avg_ff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(moving_avg_ff_sptr self) -> float"""
        return _howto_swig.moving_avg_ff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(moving_avg_ff_sptr self) -> float"""
        return _howto_swig.moving_avg_ff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(moving_avg_ff_sptr self) -> float"""
        return _howto_swig.moving_avg_ff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(moving_avg_ff_sptr self) -> float"""
        return _howto_swig.moving_avg_ff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(moving_avg_ff_sptr self) -> float"""
        return _howto_swig.moving_avg_ff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(moving_avg_ff_sptr self) -> float"""
        return _howto_swig.moving_avg_ff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(moving_avg_ff_sptr self, int which) -> float
        pc_input_buffers_full(moving_avg_ff_sptr self) -> pmt_vector_float
        """
        return _howto_swig.moving_avg_ff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(moving_avg_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(moving_avg_ff_sptr self) -> pmt_vector_float
        """
        return _howto_swig.moving_avg_ff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(moving_avg_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(moving_avg_ff_sptr self) -> pmt_vector_float
        """
        return _howto_swig.moving_avg_ff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(moving_avg_ff_sptr self, int which) -> float
        pc_output_buffers_full(moving_avg_ff_sptr self) -> pmt_vector_float
        """
        return _howto_swig.moving_avg_ff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(moving_avg_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(moving_avg_ff_sptr self) -> pmt_vector_float
        """
        return _howto_swig.moving_avg_ff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(moving_avg_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(moving_avg_ff_sptr self) -> pmt_vector_float
        """
        return _howto_swig.moving_avg_ff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(moving_avg_ff_sptr self) -> float"""
        return _howto_swig.moving_avg_ff_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(moving_avg_ff_sptr self) -> float"""
        return _howto_swig.moving_avg_ff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(moving_avg_ff_sptr self) -> float"""
        return _howto_swig.moving_avg_ff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(moving_avg_ff_sptr self) -> float"""
        return _howto_swig.moving_avg_ff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(moving_avg_ff_sptr self) -> float"""
        return _howto_swig.moving_avg_ff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(moving_avg_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _howto_swig.moving_avg_ff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(moving_avg_ff_sptr self)"""
        return _howto_swig.moving_avg_ff_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(moving_avg_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _howto_swig.moving_avg_ff_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(moving_avg_ff_sptr self) -> int"""
        return _howto_swig.moving_avg_ff_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(moving_avg_ff_sptr self) -> int"""
        return _howto_swig.moving_avg_ff_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(moving_avg_ff_sptr self, int priority) -> int"""
        return _howto_swig.moving_avg_ff_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(moving_avg_ff_sptr self) -> std::string"""
        return _howto_swig.moving_avg_ff_sptr_name(self)


    def symbol_name(self):
        """symbol_name(moving_avg_ff_sptr self) -> std::string"""
        return _howto_swig.moving_avg_ff_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(moving_avg_ff_sptr self) -> io_signature_sptr"""
        return _howto_swig.moving_avg_ff_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(moving_avg_ff_sptr self) -> io_signature_sptr"""
        return _howto_swig.moving_avg_ff_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(moving_avg_ff_sptr self) -> long"""
        return _howto_swig.moving_avg_ff_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(moving_avg_ff_sptr self) -> basic_block_sptr"""
        return _howto_swig.moving_avg_ff_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(moving_avg_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _howto_swig.moving_avg_ff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(moving_avg_ff_sptr self) -> std::string"""
        return _howto_swig.moving_avg_ff_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(moving_avg_ff_sptr self, std::string name)"""
        return _howto_swig.moving_avg_ff_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(moving_avg_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _howto_swig.moving_avg_ff_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(moving_avg_ff_sptr self) -> swig_int_ptr"""
        return _howto_swig.moving_avg_ff_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(moving_avg_ff_sptr self) -> swig_int_ptr"""
        return _howto_swig.moving_avg_ff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(moving_avg_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _howto_swig.moving_avg_ff_sptr_message_subscribers(self, which_port)

moving_avg_ff_sptr_swigregister = _howto_swig.moving_avg_ff_sptr_swigregister
moving_avg_ff_sptr_swigregister(moving_avg_ff_sptr)


moving_avg_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
moving_avg_ff = moving_avg_ff.make;

class moving_avg_history_ff(object):
    """Proxy of C++ gr::howto::moving_avg_history_ff class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(length, scale=1.0):
        """make(int length, float scale=1.0) -> moving_avg_history_ff_sptr"""
        return _howto_swig.moving_avg_history_ff_make(length, scale)

    make = staticmethod(make)

    def set_length(self, length):
        """set_length(moving_avg_history_ff self, int length)"""
        return _howto_swig.moving_avg_history_ff_set_length(self, length)


    def set_scale(self, scale):
        """set_scale(moving_avg_history_ff self, float scale)"""
        return _howto_swig.moving_avg_history_ff_set_scale(self, scale)

    __swig_destroy__ = _howto_swig.delete_moving_avg_history_ff
    __del__ = lambda self: None
moving_avg_history_ff_swigregister = _howto_swig.moving_avg_history_ff_swigregister
moving_avg_history_ff_swigregister(moving_avg_history_ff)

def moving_avg_history_ff_make(length, scale=1.0):
    """moving_avg_history_ff_make(int length, float scale=1.0) -> moving_avg_history_ff_sptr"""
    return _howto_swig.moving_avg_history_ff_make(length, scale)

class moving_avg_history_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::howto::moving_avg_history_ff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::howto::moving_avg_history_ff)> self) -> moving_avg_history_ff_sptr
        __init__(boost::shared_ptr<(gr::howto::moving_avg_history_ff)> self, moving_avg_history_ff p) -> moving_avg_history_ff_sptr
        """
        this = _howto_swig.new_moving_avg_history_ff_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(moving_avg_history_ff_sptr self) -> moving_avg_history_ff"""
        return _howto_swig.moving_avg_history_ff_sptr___deref__(self)

    __swig_destroy__ = _howto_swig.delete_moving_avg_history_ff_sptr
    __del__ = lambda self: None

    def make(self, length, scale=1.0):
        """make(moving_avg_history_ff_sptr self, int length, float scale=1.0) -> moving_avg_history_ff_sptr"""
        return _howto_swig.moving_avg_history_ff_sptr_make(self, length, scale)


    def set_length(self, length):
        """set_length(moving_avg_history_ff_sptr self, int length)"""
        return _howto_swig.moving_avg_history_ff_sptr_set_length(self, length)


    def set_scale(self, scale):
        """set_scale(moving_avg_history_ff_sptr self, float scale)"""
        return _howto_swig.moving_avg_history_ff_sptr_set_scale(self, scale)


    def history(self):
        """history(moving_avg_history_ff_sptr self) -> unsigned int"""
        return _howto_swig.moving_avg_history_ff_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(moving_avg_history_ff_sptr self, int which, int delay)
        declare_sample_delay(moving_avg_history_ff_sptr self, unsigned int delay)
        """
        return _howto_swig.moving_avg_history_ff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(moving_avg_history_ff_sptr self, int which) -> unsigned int"""
        return _howto_swig.moving_avg_history_ff_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(moving_avg_history_ff_sptr self) -> int"""
        return _howto_swig.moving_avg_history_ff_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(moving_avg_history_ff_sptr self) -> double"""
        return _howto_swig.moving_avg_history_ff_sptr_relative_rate(self)


    def start(self):
        """start(moving_avg_history_ff_sptr self) -> bool"""
        return _howto_swig.moving_avg_history_ff_sptr_start(self)


    def stop(self):
        """stop(moving_avg_history_ff_sptr self) -> bool"""
        return _howto_swig.moving_avg_history_ff_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(moving_avg_history_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _howto_swig.moving_avg_history_ff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(moving_avg_history_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _howto_swig.moving_avg_history_ff_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(moving_avg_history_ff_sptr self) -> int"""
        return _howto_swig.moving_avg_history_ff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(moving_avg_history_ff_sptr self, int m)"""
        return _howto_swig.moving_avg_history_ff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(moving_avg_history_ff_sptr self)"""
        return _howto_swig.moving_avg_history_ff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(moving_avg_history_ff_sptr self) -> bool"""
        return _howto_swig.moving_avg_history_ff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(moving_avg_history_ff_sptr self, int m)"""
        return _howto_swig.moving_avg_history_ff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(moving_avg_history_ff_sptr self) -> int"""
        return _howto_swig.moving_avg_history_ff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(moving_avg_history_ff_sptr self, int i) -> long"""
        return _howto_swig.moving_avg_history_ff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(moving_avg_history_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(moving_avg_history_ff_sptr self, int port, long max_output_buffer)
        """
        return _howto_swig.moving_avg_history_ff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(moving_avg_history_ff_sptr self, int i) -> long"""
        return _howto_swig.moving_avg_history_ff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(moving_avg_history_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(moving_avg_history_ff_sptr self, int port, long min_output_buffer)
        """
        return _howto_swig.moving_avg_history_ff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(moving_avg_history_ff_sptr self) -> float"""
        return _howto_swig.moving_avg_history_ff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(moving_avg_history_ff_sptr self) -> float"""
        return _howto_swig.moving_avg_history_ff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(moving_avg_history_ff_sptr self) -> float"""
        return _howto_swig.moving_avg_history_ff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(moving_avg_history_ff_sptr self) -> float"""
        return _howto_swig.moving_avg_history_ff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(moving_avg_history_ff_sptr self) -> float"""
        return _howto_swig.moving_avg_history_ff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(moving_avg_history_ff_sptr self) -> float"""
        return _howto_swig.moving_avg_history_ff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(moving_avg_history_ff_sptr self, int which) -> float
        pc_input_buffers_full(moving_avg_history_ff_sptr self) -> pmt_vector_float
        """
        return _howto_swig.moving_avg_history_ff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(moving_avg_history_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(moving_avg_history_ff_sptr self) -> pmt_vector_float
        """
        return _howto_swig.moving_avg_history_ff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(moving_avg_history_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(moving_avg_history_ff_sptr self) -> pmt_vector_float
        """
        return _howto_swig.moving_avg_history_ff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(moving_avg_history_ff_sptr self, int which) -> float
        pc_output_buffers_full(moving_avg_history_ff_sptr self) -> pmt_vector_float
        """
        return _howto_swig.moving_avg_history_ff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(moving_avg_history_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(moving_avg_history_ff_sptr self) -> pmt_vector_float
        """
        return _howto_swig.moving_avg_history_ff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(moving_avg_history_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(moving_avg_history_ff_sptr self) -> pmt_vector_float
        """
        return _howto_swig.moving_avg_history_ff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(moving_avg_history_ff_sptr self) -> float"""
        return _howto_swig.moving_avg_history_ff_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(moving_avg_history_ff_sptr self) -> float"""
        return _howto_swig.moving_avg_history_ff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(moving_avg_history_ff_sptr self) -> float"""
        return _howto_swig.moving_avg_history_ff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(moving_avg_history_ff_sptr self) -> float"""
        return _howto_swig.moving_avg_history_ff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(moving_avg_history_ff_sptr self) -> float"""
        return _howto_swig.moving_avg_history_ff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(moving_avg_history_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _howto_swig.moving_avg_history_ff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(moving_avg_history_ff_sptr self)"""
        return _howto_swig.moving_avg_history_ff_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(moving_avg_history_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _howto_swig.moving_avg_history_ff_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(moving_avg_history_ff_sptr self) -> int"""
        return _howto_swig.moving_avg_history_ff_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(moving_avg_history_ff_sptr self) -> int"""
        return _howto_swig.moving_avg_history_ff_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(moving_avg_history_ff_sptr self, int priority) -> int"""
        return _howto_swig.moving_avg_history_ff_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(moving_avg_history_ff_sptr self) -> std::string"""
        return _howto_swig.moving_avg_history_ff_sptr_name(self)


    def symbol_name(self):
        """symbol_name(moving_avg_history_ff_sptr self) -> std::string"""
        return _howto_swig.moving_avg_history_ff_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(moving_avg_history_ff_sptr self) -> io_signature_sptr"""
        return _howto_swig.moving_avg_history_ff_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(moving_avg_history_ff_sptr self) -> io_signature_sptr"""
        return _howto_swig.moving_avg_history_ff_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(moving_avg_history_ff_sptr self) -> long"""
        return _howto_swig.moving_avg_history_ff_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(moving_avg_history_ff_sptr self) -> basic_block_sptr"""
        return _howto_swig.moving_avg_history_ff_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(moving_avg_history_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _howto_swig.moving_avg_history_ff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(moving_avg_history_ff_sptr self) -> std::string"""
        return _howto_swig.moving_avg_history_ff_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(moving_avg_history_ff_sptr self, std::string name)"""
        return _howto_swig.moving_avg_history_ff_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(moving_avg_history_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _howto_swig.moving_avg_history_ff_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(moving_avg_history_ff_sptr self) -> swig_int_ptr"""
        return _howto_swig.moving_avg_history_ff_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(moving_avg_history_ff_sptr self) -> swig_int_ptr"""
        return _howto_swig.moving_avg_history_ff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(moving_avg_history_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _howto_swig.moving_avg_history_ff_sptr_message_subscribers(self, which_port)

moving_avg_history_ff_sptr_swigregister = _howto_swig.moving_avg_history_ff_sptr_swigregister
moving_avg_history_ff_sptr_swigregister(moving_avg_history_ff_sptr)


moving_avg_history_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
moving_avg_history_ff = moving_avg_history_ff.make;

class iq_mag_cf(object):
    """Proxy of C++ gr::howto::iq_mag_cf class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(scale):
        """make(float scale) -> iq_mag_cf_sptr"""
        return _howto_swig.iq_mag_cf_make(scale)

    make = staticmethod(make)

    def set_scale(self, scale):
        """set_scale(iq_mag_cf self, float scale)"""
        return _howto_swig.iq_mag_cf_set_scale(self, scale)


    def scale(self):
        """scale(iq_mag_cf self) -> float"""
        return _howto_swig.iq_mag_cf_scale(self)

    __swig_destroy__ = _howto_swig.delete_iq_mag_cf
    __del__ = lambda self: None
iq_mag_cf_swigregister = _howto_swig.iq_mag_cf_swigregister
iq_mag_cf_swigregister(iq_mag_cf)

def iq_mag_cf_make(scale):
    """iq_mag_cf_make(float scale) -> iq_mag_cf_sptr"""
    return _howto_swig.iq_mag_cf_make(scale)

class iq_mag_cf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::howto::iq_mag_cf)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::howto::iq_mag_cf)> self) -> iq_mag_cf_sptr
        __init__(boost::shared_ptr<(gr::howto::iq_mag_cf)> self, iq_mag_cf p) -> iq_mag_cf_sptr
        """
        this = _howto_swig.new_iq_mag_cf_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(iq_mag_cf_sptr self) -> iq_mag_cf"""
        return _howto_swig.iq_mag_cf_sptr___deref__(self)

    __swig_destroy__ = _howto_swig.delete_iq_mag_cf_sptr
    __del__ = lambda self: None

    def make(self, scale):
        """make(iq_mag_cf_sptr self, float scale) -> iq_mag_cf_sptr"""
        return _howto_swig.iq_mag_cf_sptr_make(self, scale)


    def set_scale(self, scale):
        """set_scale(iq_mag_cf_sptr self, float scale)"""
        return _howto_swig.iq_mag_cf_sptr_set_scale(self, scale)


    def scale(self):
        """scale(iq_mag_cf_sptr self) -> float"""
        return _howto_swig.iq_mag_cf_sptr_scale(self)


    def history(self):
        """history(iq_mag_cf_sptr self) -> unsigned int"""
        return _howto_swig.iq_mag_cf_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(iq_mag_cf_sptr self, int which, int delay)
        declare_sample_delay(iq_mag_cf_sptr self, unsigned int delay)
        """
        return _howto_swig.iq_mag_cf_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(iq_mag_cf_sptr self, int which) -> unsigned int"""
        return _howto_swig.iq_mag_cf_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(iq_mag_cf_sptr self) -> int"""
        return _howto_swig.iq_mag_cf_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(iq_mag_cf_sptr self) -> double"""
        return _howto_swig.iq_mag_cf_sptr_relative_rate(self)


    def start(self):
        """start(iq_mag_cf_sptr self) -> bool"""
        return _howto_swig.iq_mag_cf_sptr_start(self)


    def stop(self):
        """stop(iq_mag_cf_sptr self) -> bool"""
        return _howto_swig.iq_mag_cf_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(iq_mag_cf_sptr self, unsigned int which_input) -> uint64_t"""
        return _howto_swig.iq_mag_cf_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(iq_mag_cf_sptr self, unsigned int which_output) -> uint64_t"""
        return _howto_swig.iq_mag_cf_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(iq_mag_cf_sptr self) -> int"""
        return _howto_swig.iq_mag_cf_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(iq_mag_cf_sptr self, int m)"""
        return _howto_swig.iq_mag_cf_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(iq_mag_cf_sptr self)"""
        return _howto_swig.iq_mag_cf_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(iq_mag_cf_sptr self) -> bool"""
        return _howto_swig.iq_mag_cf_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(iq_mag_cf_sptr self, int m)"""
        return _howto_swig.iq_mag_cf_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(iq_mag_cf_sptr self) -> int"""
        return _howto_swig.iq_mag_cf_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(iq_mag_cf_sptr self, int i) -> long"""
        return _howto_swig.iq_mag_cf_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(iq_mag_cf_sptr self, long max_output_buffer)
        set_max_output_buffer(iq_mag_cf_sptr self, int port, long max_output_buffer)
        """
        return _howto_swig.iq_mag_cf_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(iq_mag_cf_sptr self, int i) -> long"""
        return _howto_swig.iq_mag_cf_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(iq_mag_cf_sptr self, long min_output_buffer)
        set_min_output_buffer(iq_mag_cf_sptr self, int port, long min_output_buffer)
        """
        return _howto_swig.iq_mag_cf_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(iq_mag_cf_sptr self) -> float"""
        return _howto_swig.iq_mag_cf_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(iq_mag_cf_sptr self) -> float"""
        return _howto_swig.iq_mag_cf_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(iq_mag_cf_sptr self) -> float"""
        return _howto_swig.iq_mag_cf_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(iq_mag_cf_sptr self) -> float"""
        return _howto_swig.iq_mag_cf_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(iq_mag_cf_sptr self) -> float"""
        return _howto_swig.iq_mag_cf_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(iq_mag_cf_sptr self) -> float"""
        return _howto_swig.iq_mag_cf_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(iq_mag_cf_sptr self, int which) -> float
        pc_input_buffers_full(iq_mag_cf_sptr self) -> pmt_vector_float
        """
        return _howto_swig.iq_mag_cf_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(iq_mag_cf_sptr self, int which) -> float
        pc_input_buffers_full_avg(iq_mag_cf_sptr self) -> pmt_vector_float
        """
        return _howto_swig.iq_mag_cf_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(iq_mag_cf_sptr self, int which) -> float
        pc_input_buffers_full_var(iq_mag_cf_sptr self) -> pmt_vector_float
        """
        return _howto_swig.iq_mag_cf_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(iq_mag_cf_sptr self, int which) -> float
        pc_output_buffers_full(iq_mag_cf_sptr self) -> pmt_vector_float
        """
        return _howto_swig.iq_mag_cf_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(iq_mag_cf_sptr self, int which) -> float
        pc_output_buffers_full_avg(iq_mag_cf_sptr self) -> pmt_vector_float
        """
        return _howto_swig.iq_mag_cf_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(iq_mag_cf_sptr self, int which) -> float
        pc_output_buffers_full_var(iq_mag_cf_sptr self) -> pmt_vector_float
        """
        return _howto_swig.iq_mag_cf_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(iq_mag_cf_sptr self) -> float"""
        return _howto_swig.iq_mag_cf_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(iq_mag_cf_sptr self) -> float"""
        return _howto_swig.iq_mag_cf_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(iq_mag_cf_sptr self) -> float"""
        return _howto_swig.iq_mag_cf_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(iq_mag_cf_sptr self) -> float"""
        return _howto_swig.iq_mag_cf_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(iq_mag_cf_sptr self) -> float"""
        return _howto_swig.iq_mag_cf_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(iq_mag_cf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _howto_swig.iq_mag_cf_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(iq_mag_cf_sptr self)"""
        return _howto_swig.iq_mag_cf_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(iq_mag_cf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _howto_swig.iq_mag_cf_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(iq_mag_cf_sptr self) -> int"""
        return _howto_swig.iq_mag_cf_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(iq_mag_cf_sptr self) -> int"""
        return _howto_swig.iq_mag_cf_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(iq_mag_cf_sptr self, int priority) -> int"""
        return _howto_swig.iq_mag_cf_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(iq_mag_cf_sptr self) -> std::string"""
        return _howto_swig.iq_mag_cf_sptr_name(self)


    def symbol_name(self):
        """symbol_name(iq_mag_cf_sptr self) -> std::string"""
        return _howto_swig.iq_mag_cf_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(iq_mag_cf_sptr self) -> io_signature_sptr"""
        return _howto_swig.iq_mag_cf_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(iq_mag_cf_sptr self) -> io_signature_sptr"""
        return _howto_swig.iq_mag_cf_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(iq_mag_cf_sptr self) -> long"""
        return _howto_swig.iq_mag_cf_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(iq_mag_cf_sptr self) -> basic_block_sptr"""
        return _howto_swig.iq_mag_cf_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(iq_mag_cf_sptr self, int ninputs, int noutputs) -> bool"""
        return _howto_swig.iq_mag_cf_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(iq_mag_cf_sptr self) -> std::string"""
        return _howto_swig.iq_mag_cf_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(iq_mag_cf_sptr self, std::string name)"""
        return _howto_swig.iq_mag_cf_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(iq_mag_cf_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _howto_swig.iq_mag_cf_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(iq_mag_cf_sptr self) -> swig_int_ptr"""
        return _howto_swig.iq_mag_cf_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(iq_mag_cf_sptr self) -> swig_int_ptr"""
        return _howto_swig.iq_mag_cf_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(iq_mag_cf_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _howto_swig.iq_mag_cf_sptr_message_subscribers(self, which_port)

iq_mag_cf_sptr_swigregister = _howto_swig.iq_mag_cf_sptr_swigregister
iq_mag_cf_sptr_swigregister(iq_mag_cf_sptr)


iq_mag_cf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
iq_mag_cf = iq_mag_cf.make;

class iq_select_cf(object):
    """Proxy of C++ gr::howto::iq_select_cf class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(scale, mode):
        """make(float scale, int mode) -> iq_select_cf_sptr"""
        return _howto_swig.iq_select_cf_make(scale, mode)

    make = staticmethod(make)

    def set_scale(self, scale):
        """set_scale(iq_select_cf self, float scale)"""
        return _howto_swig.iq_select_cf_set_scale(self, scale)


    def scale(self):
        """scale(iq_select_cf self) -> float"""
        return _howto_swig.iq_select_cf_scale(self)


    def set_mode(self, mode):
        """set_mode(iq_select_cf self, int mode)"""
        return _howto_swig.iq_select_cf_set_mode(self, mode)


    def mode(self):
        """mode(iq_select_cf self) -> int"""
        return _howto_swig.iq_select_cf_mode(self)

    __swig_destroy__ = _howto_swig.delete_iq_select_cf
    __del__ = lambda self: None
iq_select_cf_swigregister = _howto_swig.iq_select_cf_swigregister
iq_select_cf_swigregister(iq_select_cf)

def iq_select_cf_make(scale, mode):
    """iq_select_cf_make(float scale, int mode) -> iq_select_cf_sptr"""
    return _howto_swig.iq_select_cf_make(scale, mode)

class iq_select_cf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::howto::iq_select_cf)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::howto::iq_select_cf)> self) -> iq_select_cf_sptr
        __init__(boost::shared_ptr<(gr::howto::iq_select_cf)> self, iq_select_cf p) -> iq_select_cf_sptr
        """
        this = _howto_swig.new_iq_select_cf_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(iq_select_cf_sptr self) -> iq_select_cf"""
        return _howto_swig.iq_select_cf_sptr___deref__(self)

    __swig_destroy__ = _howto_swig.delete_iq_select_cf_sptr
    __del__ = lambda self: None

    def make(self, scale, mode):
        """make(iq_select_cf_sptr self, float scale, int mode) -> iq_select_cf_sptr"""
        return _howto_swig.iq_select_cf_sptr_make(self, scale, mode)


    def set_scale(self, scale):
        """set_scale(iq_select_cf_sptr self, float scale)"""
        return _howto_swig.iq_select_cf_sptr_set_scale(self, scale)


    def scale(self):
        """scale(iq_select_cf_sptr self) -> float"""
        return _howto_swig.iq_select_cf_sptr_scale(self)


    def set_mode(self, mode):
        """set_mode(iq_select_cf_sptr self, int mode)"""
        return _howto_swig.iq_select_cf_sptr_set_mode(self, mode)


    def mode(self):
        """mode(iq_select_cf_sptr self) -> int"""
        return _howto_swig.iq_select_cf_sptr_mode(self)


    def history(self):
        """history(iq_select_cf_sptr self) -> unsigned int"""
        return _howto_swig.iq_select_cf_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(iq_select_cf_sptr self, int which, int delay)
        declare_sample_delay(iq_select_cf_sptr self, unsigned int delay)
        """
        return _howto_swig.iq_select_cf_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(iq_select_cf_sptr self, int which) -> unsigned int"""
        return _howto_swig.iq_select_cf_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(iq_select_cf_sptr self) -> int"""
        return _howto_swig.iq_select_cf_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(iq_select_cf_sptr self) -> double"""
        return _howto_swig.iq_select_cf_sptr_relative_rate(self)


    def start(self):
        """start(iq_select_cf_sptr self) -> bool"""
        return _howto_swig.iq_select_cf_sptr_start(self)


    def stop(self):
        """stop(iq_select_cf_sptr self) -> bool"""
        return _howto_swig.iq_select_cf_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(iq_select_cf_sptr self, unsigned int which_input) -> uint64_t"""
        return _howto_swig.iq_select_cf_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(iq_select_cf_sptr self, unsigned int which_output) -> uint64_t"""
        return _howto_swig.iq_select_cf_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(iq_select_cf_sptr self) -> int"""
        return _howto_swig.iq_select_cf_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(iq_select_cf_sptr self, int m)"""
        return _howto_swig.iq_select_cf_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(iq_select_cf_sptr self)"""
        return _howto_swig.iq_select_cf_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(iq_select_cf_sptr self) -> bool"""
        return _howto_swig.iq_select_cf_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(iq_select_cf_sptr self, int m)"""
        return _howto_swig.iq_select_cf_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(iq_select_cf_sptr self) -> int"""
        return _howto_swig.iq_select_cf_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(iq_select_cf_sptr self, int i) -> long"""
        return _howto_swig.iq_select_cf_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(iq_select_cf_sptr self, long max_output_buffer)
        set_max_output_buffer(iq_select_cf_sptr self, int port, long max_output_buffer)
        """
        return _howto_swig.iq_select_cf_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(iq_select_cf_sptr self, int i) -> long"""
        return _howto_swig.iq_select_cf_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(iq_select_cf_sptr self, long min_output_buffer)
        set_min_output_buffer(iq_select_cf_sptr self, int port, long min_output_buffer)
        """
        return _howto_swig.iq_select_cf_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(iq_select_cf_sptr self) -> float"""
        return _howto_swig.iq_select_cf_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(iq_select_cf_sptr self) -> float"""
        return _howto_swig.iq_select_cf_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(iq_select_cf_sptr self) -> float"""
        return _howto_swig.iq_select_cf_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(iq_select_cf_sptr self) -> float"""
        return _howto_swig.iq_select_cf_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(iq_select_cf_sptr self) -> float"""
        return _howto_swig.iq_select_cf_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(iq_select_cf_sptr self) -> float"""
        return _howto_swig.iq_select_cf_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(iq_select_cf_sptr self, int which) -> float
        pc_input_buffers_full(iq_select_cf_sptr self) -> pmt_vector_float
        """
        return _howto_swig.iq_select_cf_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(iq_select_cf_sptr self, int which) -> float
        pc_input_buffers_full_avg(iq_select_cf_sptr self) -> pmt_vector_float
        """
        return _howto_swig.iq_select_cf_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(iq_select_cf_sptr self, int which) -> float
        pc_input_buffers_full_var(iq_select_cf_sptr self) -> pmt_vector_float
        """
        return _howto_swig.iq_select_cf_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(iq_select_cf_sptr self, int which) -> float
        pc_output_buffers_full(iq_select_cf_sptr self) -> pmt_vector_float
        """
        return _howto_swig.iq_select_cf_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(iq_select_cf_sptr self, int which) -> float
        pc_output_buffers_full_avg(iq_select_cf_sptr self) -> pmt_vector_float
        """
        return _howto_swig.iq_select_cf_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(iq_select_cf_sptr self, int which) -> float
        pc_output_buffers_full_var(iq_select_cf_sptr self) -> pmt_vector_float
        """
        return _howto_swig.iq_select_cf_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(iq_select_cf_sptr self) -> float"""
        return _howto_swig.iq_select_cf_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(iq_select_cf_sptr self) -> float"""
        return _howto_swig.iq_select_cf_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(iq_select_cf_sptr self) -> float"""
        return _howto_swig.iq_select_cf_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(iq_select_cf_sptr self) -> float"""
        return _howto_swig.iq_select_cf_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(iq_select_cf_sptr self) -> float"""
        return _howto_swig.iq_select_cf_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(iq_select_cf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _howto_swig.iq_select_cf_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(iq_select_cf_sptr self)"""
        return _howto_swig.iq_select_cf_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(iq_select_cf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _howto_swig.iq_select_cf_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(iq_select_cf_sptr self) -> int"""
        return _howto_swig.iq_select_cf_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(iq_select_cf_sptr self) -> int"""
        return _howto_swig.iq_select_cf_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(iq_select_cf_sptr self, int priority) -> int"""
        return _howto_swig.iq_select_cf_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(iq_select_cf_sptr self) -> std::string"""
        return _howto_swig.iq_select_cf_sptr_name(self)


    def symbol_name(self):
        """symbol_name(iq_select_cf_sptr self) -> std::string"""
        return _howto_swig.iq_select_cf_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(iq_select_cf_sptr self) -> io_signature_sptr"""
        return _howto_swig.iq_select_cf_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(iq_select_cf_sptr self) -> io_signature_sptr"""
        return _howto_swig.iq_select_cf_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(iq_select_cf_sptr self) -> long"""
        return _howto_swig.iq_select_cf_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(iq_select_cf_sptr self) -> basic_block_sptr"""
        return _howto_swig.iq_select_cf_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(iq_select_cf_sptr self, int ninputs, int noutputs) -> bool"""
        return _howto_swig.iq_select_cf_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(iq_select_cf_sptr self) -> std::string"""
        return _howto_swig.iq_select_cf_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(iq_select_cf_sptr self, std::string name)"""
        return _howto_swig.iq_select_cf_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(iq_select_cf_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _howto_swig.iq_select_cf_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(iq_select_cf_sptr self) -> swig_int_ptr"""
        return _howto_swig.iq_select_cf_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(iq_select_cf_sptr self) -> swig_int_ptr"""
        return _howto_swig.iq_select_cf_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(iq_select_cf_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _howto_swig.iq_select_cf_sptr_message_subscribers(self, which_port)

iq_select_cf_sptr_swigregister = _howto_swig.iq_select_cf_sptr_swigregister
iq_select_cf_sptr_swigregister(iq_select_cf_sptr)


iq_select_cf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
iq_select_cf = iq_select_cf.make;

class flex_fir_ff(object):
    """Proxy of C++ gr::howto::flex_fir_ff class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(mode, samp_rate, f1, f2, width, gain):
        """make(int mode, float samp_rate, float f1, float f2, float width, float gain) -> flex_fir_ff_sptr"""
        return _howto_swig.flex_fir_ff_make(mode, samp_rate, f1, f2, width, gain)

    make = staticmethod(make)
    __swig_destroy__ = _howto_swig.delete_flex_fir_ff
    __del__ = lambda self: None

    def set_mode(self, mode):
        """set_mode(flex_fir_ff self, int mode)"""
        return _howto_swig.flex_fir_ff_set_mode(self, mode)


    def mode(self):
        """mode(flex_fir_ff self) -> int"""
        return _howto_swig.flex_fir_ff_mode(self)


    def set_samp_rate(self, fs):
        """set_samp_rate(flex_fir_ff self, float fs)"""
        return _howto_swig.flex_fir_ff_set_samp_rate(self, fs)


    def samp_rate(self):
        """samp_rate(flex_fir_ff self) -> float"""
        return _howto_swig.flex_fir_ff_samp_rate(self)


    def set_f1(self, f):
        """set_f1(flex_fir_ff self, float f)"""
        return _howto_swig.flex_fir_ff_set_f1(self, f)


    def f1(self):
        """f1(flex_fir_ff self) -> float"""
        return _howto_swig.flex_fir_ff_f1(self)


    def set_f2(self, f):
        """set_f2(flex_fir_ff self, float f)"""
        return _howto_swig.flex_fir_ff_set_f2(self, f)


    def f2(self):
        """f2(flex_fir_ff self) -> float"""
        return _howto_swig.flex_fir_ff_f2(self)


    def set_width(self, w):
        """set_width(flex_fir_ff self, float w)"""
        return _howto_swig.flex_fir_ff_set_width(self, w)


    def width(self):
        """width(flex_fir_ff self) -> float"""
        return _howto_swig.flex_fir_ff_width(self)


    def set_gain(self, g):
        """set_gain(flex_fir_ff self, float g)"""
        return _howto_swig.flex_fir_ff_set_gain(self, g)


    def gain(self):
        """gain(flex_fir_ff self) -> float"""
        return _howto_swig.flex_fir_ff_gain(self)


    def taps(self):
        """taps(flex_fir_ff self) -> pmt_vector_float"""
        return _howto_swig.flex_fir_ff_taps(self)

flex_fir_ff_swigregister = _howto_swig.flex_fir_ff_swigregister
flex_fir_ff_swigregister(flex_fir_ff)

def flex_fir_ff_make(mode, samp_rate, f1, f2, width, gain):
    """flex_fir_ff_make(int mode, float samp_rate, float f1, float f2, float width, float gain) -> flex_fir_ff_sptr"""
    return _howto_swig.flex_fir_ff_make(mode, samp_rate, f1, f2, width, gain)

class flex_fir_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::howto::flex_fir_ff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::howto::flex_fir_ff)> self) -> flex_fir_ff_sptr
        __init__(boost::shared_ptr<(gr::howto::flex_fir_ff)> self, flex_fir_ff p) -> flex_fir_ff_sptr
        """
        this = _howto_swig.new_flex_fir_ff_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(flex_fir_ff_sptr self) -> flex_fir_ff"""
        return _howto_swig.flex_fir_ff_sptr___deref__(self)

    __swig_destroy__ = _howto_swig.delete_flex_fir_ff_sptr
    __del__ = lambda self: None

    def make(self, mode, samp_rate, f1, f2, width, gain):
        """make(flex_fir_ff_sptr self, int mode, float samp_rate, float f1, float f2, float width, float gain) -> flex_fir_ff_sptr"""
        return _howto_swig.flex_fir_ff_sptr_make(self, mode, samp_rate, f1, f2, width, gain)


    def set_mode(self, mode):
        """set_mode(flex_fir_ff_sptr self, int mode)"""
        return _howto_swig.flex_fir_ff_sptr_set_mode(self, mode)


    def mode(self):
        """mode(flex_fir_ff_sptr self) -> int"""
        return _howto_swig.flex_fir_ff_sptr_mode(self)


    def set_samp_rate(self, fs):
        """set_samp_rate(flex_fir_ff_sptr self, float fs)"""
        return _howto_swig.flex_fir_ff_sptr_set_samp_rate(self, fs)


    def samp_rate(self):
        """samp_rate(flex_fir_ff_sptr self) -> float"""
        return _howto_swig.flex_fir_ff_sptr_samp_rate(self)


    def set_f1(self, f):
        """set_f1(flex_fir_ff_sptr self, float f)"""
        return _howto_swig.flex_fir_ff_sptr_set_f1(self, f)


    def f1(self):
        """f1(flex_fir_ff_sptr self) -> float"""
        return _howto_swig.flex_fir_ff_sptr_f1(self)


    def set_f2(self, f):
        """set_f2(flex_fir_ff_sptr self, float f)"""
        return _howto_swig.flex_fir_ff_sptr_set_f2(self, f)


    def f2(self):
        """f2(flex_fir_ff_sptr self) -> float"""
        return _howto_swig.flex_fir_ff_sptr_f2(self)


    def set_width(self, w):
        """set_width(flex_fir_ff_sptr self, float w)"""
        return _howto_swig.flex_fir_ff_sptr_set_width(self, w)


    def width(self):
        """width(flex_fir_ff_sptr self) -> float"""
        return _howto_swig.flex_fir_ff_sptr_width(self)


    def set_gain(self, g):
        """set_gain(flex_fir_ff_sptr self, float g)"""
        return _howto_swig.flex_fir_ff_sptr_set_gain(self, g)


    def gain(self):
        """gain(flex_fir_ff_sptr self) -> float"""
        return _howto_swig.flex_fir_ff_sptr_gain(self)


    def taps(self):
        """taps(flex_fir_ff_sptr self) -> pmt_vector_float"""
        return _howto_swig.flex_fir_ff_sptr_taps(self)


    def history(self):
        """history(flex_fir_ff_sptr self) -> unsigned int"""
        return _howto_swig.flex_fir_ff_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(flex_fir_ff_sptr self, int which, int delay)
        declare_sample_delay(flex_fir_ff_sptr self, unsigned int delay)
        """
        return _howto_swig.flex_fir_ff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(flex_fir_ff_sptr self, int which) -> unsigned int"""
        return _howto_swig.flex_fir_ff_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(flex_fir_ff_sptr self) -> int"""
        return _howto_swig.flex_fir_ff_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(flex_fir_ff_sptr self) -> double"""
        return _howto_swig.flex_fir_ff_sptr_relative_rate(self)


    def start(self):
        """start(flex_fir_ff_sptr self) -> bool"""
        return _howto_swig.flex_fir_ff_sptr_start(self)


    def stop(self):
        """stop(flex_fir_ff_sptr self) -> bool"""
        return _howto_swig.flex_fir_ff_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(flex_fir_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _howto_swig.flex_fir_ff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(flex_fir_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _howto_swig.flex_fir_ff_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(flex_fir_ff_sptr self) -> int"""
        return _howto_swig.flex_fir_ff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(flex_fir_ff_sptr self, int m)"""
        return _howto_swig.flex_fir_ff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(flex_fir_ff_sptr self)"""
        return _howto_swig.flex_fir_ff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(flex_fir_ff_sptr self) -> bool"""
        return _howto_swig.flex_fir_ff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(flex_fir_ff_sptr self, int m)"""
        return _howto_swig.flex_fir_ff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(flex_fir_ff_sptr self) -> int"""
        return _howto_swig.flex_fir_ff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(flex_fir_ff_sptr self, int i) -> long"""
        return _howto_swig.flex_fir_ff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(flex_fir_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(flex_fir_ff_sptr self, int port, long max_output_buffer)
        """
        return _howto_swig.flex_fir_ff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(flex_fir_ff_sptr self, int i) -> long"""
        return _howto_swig.flex_fir_ff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(flex_fir_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(flex_fir_ff_sptr self, int port, long min_output_buffer)
        """
        return _howto_swig.flex_fir_ff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(flex_fir_ff_sptr self) -> float"""
        return _howto_swig.flex_fir_ff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(flex_fir_ff_sptr self) -> float"""
        return _howto_swig.flex_fir_ff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(flex_fir_ff_sptr self) -> float"""
        return _howto_swig.flex_fir_ff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(flex_fir_ff_sptr self) -> float"""
        return _howto_swig.flex_fir_ff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(flex_fir_ff_sptr self) -> float"""
        return _howto_swig.flex_fir_ff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(flex_fir_ff_sptr self) -> float"""
        return _howto_swig.flex_fir_ff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(flex_fir_ff_sptr self, int which) -> float
        pc_input_buffers_full(flex_fir_ff_sptr self) -> pmt_vector_float
        """
        return _howto_swig.flex_fir_ff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(flex_fir_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(flex_fir_ff_sptr self) -> pmt_vector_float
        """
        return _howto_swig.flex_fir_ff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(flex_fir_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(flex_fir_ff_sptr self) -> pmt_vector_float
        """
        return _howto_swig.flex_fir_ff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(flex_fir_ff_sptr self, int which) -> float
        pc_output_buffers_full(flex_fir_ff_sptr self) -> pmt_vector_float
        """
        return _howto_swig.flex_fir_ff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(flex_fir_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(flex_fir_ff_sptr self) -> pmt_vector_float
        """
        return _howto_swig.flex_fir_ff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(flex_fir_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(flex_fir_ff_sptr self) -> pmt_vector_float
        """
        return _howto_swig.flex_fir_ff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(flex_fir_ff_sptr self) -> float"""
        return _howto_swig.flex_fir_ff_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(flex_fir_ff_sptr self) -> float"""
        return _howto_swig.flex_fir_ff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(flex_fir_ff_sptr self) -> float"""
        return _howto_swig.flex_fir_ff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(flex_fir_ff_sptr self) -> float"""
        return _howto_swig.flex_fir_ff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(flex_fir_ff_sptr self) -> float"""
        return _howto_swig.flex_fir_ff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(flex_fir_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _howto_swig.flex_fir_ff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(flex_fir_ff_sptr self)"""
        return _howto_swig.flex_fir_ff_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(flex_fir_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _howto_swig.flex_fir_ff_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(flex_fir_ff_sptr self) -> int"""
        return _howto_swig.flex_fir_ff_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(flex_fir_ff_sptr self) -> int"""
        return _howto_swig.flex_fir_ff_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(flex_fir_ff_sptr self, int priority) -> int"""
        return _howto_swig.flex_fir_ff_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(flex_fir_ff_sptr self) -> std::string"""
        return _howto_swig.flex_fir_ff_sptr_name(self)


    def symbol_name(self):
        """symbol_name(flex_fir_ff_sptr self) -> std::string"""
        return _howto_swig.flex_fir_ff_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(flex_fir_ff_sptr self) -> io_signature_sptr"""
        return _howto_swig.flex_fir_ff_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(flex_fir_ff_sptr self) -> io_signature_sptr"""
        return _howto_swig.flex_fir_ff_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(flex_fir_ff_sptr self) -> long"""
        return _howto_swig.flex_fir_ff_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(flex_fir_ff_sptr self) -> basic_block_sptr"""
        return _howto_swig.flex_fir_ff_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(flex_fir_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _howto_swig.flex_fir_ff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(flex_fir_ff_sptr self) -> std::string"""
        return _howto_swig.flex_fir_ff_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(flex_fir_ff_sptr self, std::string name)"""
        return _howto_swig.flex_fir_ff_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(flex_fir_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _howto_swig.flex_fir_ff_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(flex_fir_ff_sptr self) -> swig_int_ptr"""
        return _howto_swig.flex_fir_ff_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(flex_fir_ff_sptr self) -> swig_int_ptr"""
        return _howto_swig.flex_fir_ff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(flex_fir_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _howto_swig.flex_fir_ff_sptr_message_subscribers(self, which_port)

flex_fir_ff_sptr_swigregister = _howto_swig.flex_fir_ff_sptr_swigregister
flex_fir_ff_sptr_swigregister(flex_fir_ff_sptr)


flex_fir_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
flex_fir_ff = flex_fir_ff.make;

class flex_fir_cc(object):
    """Proxy of C++ gr::howto::flex_fir_cc class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(mode, samp_rate, f1, f2, width, gain):
        """make(int mode, float samp_rate, float f1, float f2, float width, float gain) -> flex_fir_cc_sptr"""
        return _howto_swig.flex_fir_cc_make(mode, samp_rate, f1, f2, width, gain)

    make = staticmethod(make)
    __swig_destroy__ = _howto_swig.delete_flex_fir_cc
    __del__ = lambda self: None

    def set_mode(self, mode):
        """set_mode(flex_fir_cc self, int mode)"""
        return _howto_swig.flex_fir_cc_set_mode(self, mode)


    def mode(self):
        """mode(flex_fir_cc self) -> int"""
        return _howto_swig.flex_fir_cc_mode(self)


    def set_samp_rate(self, fs):
        """set_samp_rate(flex_fir_cc self, float fs)"""
        return _howto_swig.flex_fir_cc_set_samp_rate(self, fs)


    def samp_rate(self):
        """samp_rate(flex_fir_cc self) -> float"""
        return _howto_swig.flex_fir_cc_samp_rate(self)


    def set_f1(self, f):
        """set_f1(flex_fir_cc self, float f)"""
        return _howto_swig.flex_fir_cc_set_f1(self, f)


    def f1(self):
        """f1(flex_fir_cc self) -> float"""
        return _howto_swig.flex_fir_cc_f1(self)


    def set_f2(self, f):
        """set_f2(flex_fir_cc self, float f)"""
        return _howto_swig.flex_fir_cc_set_f2(self, f)


    def f2(self):
        """f2(flex_fir_cc self) -> float"""
        return _howto_swig.flex_fir_cc_f2(self)


    def set_width(self, w):
        """set_width(flex_fir_cc self, float w)"""
        return _howto_swig.flex_fir_cc_set_width(self, w)


    def width(self):
        """width(flex_fir_cc self) -> float"""
        return _howto_swig.flex_fir_cc_width(self)


    def set_gain(self, g):
        """set_gain(flex_fir_cc self, float g)"""
        return _howto_swig.flex_fir_cc_set_gain(self, g)


    def gain(self):
        """gain(flex_fir_cc self) -> float"""
        return _howto_swig.flex_fir_cc_gain(self)


    def taps(self):
        """taps(flex_fir_cc self) -> pmt_vector_float"""
        return _howto_swig.flex_fir_cc_taps(self)

flex_fir_cc_swigregister = _howto_swig.flex_fir_cc_swigregister
flex_fir_cc_swigregister(flex_fir_cc)

def flex_fir_cc_make(mode, samp_rate, f1, f2, width, gain):
    """flex_fir_cc_make(int mode, float samp_rate, float f1, float f2, float width, float gain) -> flex_fir_cc_sptr"""
    return _howto_swig.flex_fir_cc_make(mode, samp_rate, f1, f2, width, gain)

class flex_fir_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::howto::flex_fir_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::howto::flex_fir_cc)> self) -> flex_fir_cc_sptr
        __init__(boost::shared_ptr<(gr::howto::flex_fir_cc)> self, flex_fir_cc p) -> flex_fir_cc_sptr
        """
        this = _howto_swig.new_flex_fir_cc_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(flex_fir_cc_sptr self) -> flex_fir_cc"""
        return _howto_swig.flex_fir_cc_sptr___deref__(self)

    __swig_destroy__ = _howto_swig.delete_flex_fir_cc_sptr
    __del__ = lambda self: None

    def make(self, mode, samp_rate, f1, f2, width, gain):
        """make(flex_fir_cc_sptr self, int mode, float samp_rate, float f1, float f2, float width, float gain) -> flex_fir_cc_sptr"""
        return _howto_swig.flex_fir_cc_sptr_make(self, mode, samp_rate, f1, f2, width, gain)


    def set_mode(self, mode):
        """set_mode(flex_fir_cc_sptr self, int mode)"""
        return _howto_swig.flex_fir_cc_sptr_set_mode(self, mode)


    def mode(self):
        """mode(flex_fir_cc_sptr self) -> int"""
        return _howto_swig.flex_fir_cc_sptr_mode(self)


    def set_samp_rate(self, fs):
        """set_samp_rate(flex_fir_cc_sptr self, float fs)"""
        return _howto_swig.flex_fir_cc_sptr_set_samp_rate(self, fs)


    def samp_rate(self):
        """samp_rate(flex_fir_cc_sptr self) -> float"""
        return _howto_swig.flex_fir_cc_sptr_samp_rate(self)


    def set_f1(self, f):
        """set_f1(flex_fir_cc_sptr self, float f)"""
        return _howto_swig.flex_fir_cc_sptr_set_f1(self, f)


    def f1(self):
        """f1(flex_fir_cc_sptr self) -> float"""
        return _howto_swig.flex_fir_cc_sptr_f1(self)


    def set_f2(self, f):
        """set_f2(flex_fir_cc_sptr self, float f)"""
        return _howto_swig.flex_fir_cc_sptr_set_f2(self, f)


    def f2(self):
        """f2(flex_fir_cc_sptr self) -> float"""
        return _howto_swig.flex_fir_cc_sptr_f2(self)


    def set_width(self, w):
        """set_width(flex_fir_cc_sptr self, float w)"""
        return _howto_swig.flex_fir_cc_sptr_set_width(self, w)


    def width(self):
        """width(flex_fir_cc_sptr self) -> float"""
        return _howto_swig.flex_fir_cc_sptr_width(self)


    def set_gain(self, g):
        """set_gain(flex_fir_cc_sptr self, float g)"""
        return _howto_swig.flex_fir_cc_sptr_set_gain(self, g)


    def gain(self):
        """gain(flex_fir_cc_sptr self) -> float"""
        return _howto_swig.flex_fir_cc_sptr_gain(self)


    def taps(self):
        """taps(flex_fir_cc_sptr self) -> pmt_vector_float"""
        return _howto_swig.flex_fir_cc_sptr_taps(self)


    def history(self):
        """history(flex_fir_cc_sptr self) -> unsigned int"""
        return _howto_swig.flex_fir_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(flex_fir_cc_sptr self, int which, int delay)
        declare_sample_delay(flex_fir_cc_sptr self, unsigned int delay)
        """
        return _howto_swig.flex_fir_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(flex_fir_cc_sptr self, int which) -> unsigned int"""
        return _howto_swig.flex_fir_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(flex_fir_cc_sptr self) -> int"""
        return _howto_swig.flex_fir_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(flex_fir_cc_sptr self) -> double"""
        return _howto_swig.flex_fir_cc_sptr_relative_rate(self)


    def start(self):
        """start(flex_fir_cc_sptr self) -> bool"""
        return _howto_swig.flex_fir_cc_sptr_start(self)


    def stop(self):
        """stop(flex_fir_cc_sptr self) -> bool"""
        return _howto_swig.flex_fir_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(flex_fir_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _howto_swig.flex_fir_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(flex_fir_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _howto_swig.flex_fir_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(flex_fir_cc_sptr self) -> int"""
        return _howto_swig.flex_fir_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(flex_fir_cc_sptr self, int m)"""
        return _howto_swig.flex_fir_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(flex_fir_cc_sptr self)"""
        return _howto_swig.flex_fir_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(flex_fir_cc_sptr self) -> bool"""
        return _howto_swig.flex_fir_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(flex_fir_cc_sptr self, int m)"""
        return _howto_swig.flex_fir_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(flex_fir_cc_sptr self) -> int"""
        return _howto_swig.flex_fir_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(flex_fir_cc_sptr self, int i) -> long"""
        return _howto_swig.flex_fir_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(flex_fir_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(flex_fir_cc_sptr self, int port, long max_output_buffer)
        """
        return _howto_swig.flex_fir_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(flex_fir_cc_sptr self, int i) -> long"""
        return _howto_swig.flex_fir_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(flex_fir_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(flex_fir_cc_sptr self, int port, long min_output_buffer)
        """
        return _howto_swig.flex_fir_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(flex_fir_cc_sptr self) -> float"""
        return _howto_swig.flex_fir_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(flex_fir_cc_sptr self) -> float"""
        return _howto_swig.flex_fir_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(flex_fir_cc_sptr self) -> float"""
        return _howto_swig.flex_fir_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(flex_fir_cc_sptr self) -> float"""
        return _howto_swig.flex_fir_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(flex_fir_cc_sptr self) -> float"""
        return _howto_swig.flex_fir_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(flex_fir_cc_sptr self) -> float"""
        return _howto_swig.flex_fir_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(flex_fir_cc_sptr self, int which) -> float
        pc_input_buffers_full(flex_fir_cc_sptr self) -> pmt_vector_float
        """
        return _howto_swig.flex_fir_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(flex_fir_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(flex_fir_cc_sptr self) -> pmt_vector_float
        """
        return _howto_swig.flex_fir_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(flex_fir_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(flex_fir_cc_sptr self) -> pmt_vector_float
        """
        return _howto_swig.flex_fir_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(flex_fir_cc_sptr self, int which) -> float
        pc_output_buffers_full(flex_fir_cc_sptr self) -> pmt_vector_float
        """
        return _howto_swig.flex_fir_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(flex_fir_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(flex_fir_cc_sptr self) -> pmt_vector_float
        """
        return _howto_swig.flex_fir_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(flex_fir_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(flex_fir_cc_sptr self) -> pmt_vector_float
        """
        return _howto_swig.flex_fir_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(flex_fir_cc_sptr self) -> float"""
        return _howto_swig.flex_fir_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(flex_fir_cc_sptr self) -> float"""
        return _howto_swig.flex_fir_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(flex_fir_cc_sptr self) -> float"""
        return _howto_swig.flex_fir_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(flex_fir_cc_sptr self) -> float"""
        return _howto_swig.flex_fir_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(flex_fir_cc_sptr self) -> float"""
        return _howto_swig.flex_fir_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(flex_fir_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _howto_swig.flex_fir_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(flex_fir_cc_sptr self)"""
        return _howto_swig.flex_fir_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(flex_fir_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _howto_swig.flex_fir_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(flex_fir_cc_sptr self) -> int"""
        return _howto_swig.flex_fir_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(flex_fir_cc_sptr self) -> int"""
        return _howto_swig.flex_fir_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(flex_fir_cc_sptr self, int priority) -> int"""
        return _howto_swig.flex_fir_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(flex_fir_cc_sptr self) -> std::string"""
        return _howto_swig.flex_fir_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(flex_fir_cc_sptr self) -> std::string"""
        return _howto_swig.flex_fir_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(flex_fir_cc_sptr self) -> io_signature_sptr"""
        return _howto_swig.flex_fir_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(flex_fir_cc_sptr self) -> io_signature_sptr"""
        return _howto_swig.flex_fir_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(flex_fir_cc_sptr self) -> long"""
        return _howto_swig.flex_fir_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(flex_fir_cc_sptr self) -> basic_block_sptr"""
        return _howto_swig.flex_fir_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(flex_fir_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _howto_swig.flex_fir_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(flex_fir_cc_sptr self) -> std::string"""
        return _howto_swig.flex_fir_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(flex_fir_cc_sptr self, std::string name)"""
        return _howto_swig.flex_fir_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(flex_fir_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _howto_swig.flex_fir_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(flex_fir_cc_sptr self) -> swig_int_ptr"""
        return _howto_swig.flex_fir_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(flex_fir_cc_sptr self) -> swig_int_ptr"""
        return _howto_swig.flex_fir_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(flex_fir_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _howto_swig.flex_fir_cc_sptr_message_subscribers(self, which_port)

flex_fir_cc_sptr_swigregister = _howto_swig.flex_fir_cc_sptr_swigregister
flex_fir_cc_sptr_swigregister(flex_fir_cc_sptr)


flex_fir_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
flex_fir_cc = flex_fir_cc.make;

class flex_fir_cf(object):
    """Proxy of C++ gr::howto::flex_fir_cf class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(mode, samp_rate, f1, f2, width, gain):
        """make(int mode, float samp_rate, float f1, float f2, float width, float gain) -> flex_fir_cf_sptr"""
        return _howto_swig.flex_fir_cf_make(mode, samp_rate, f1, f2, width, gain)

    make = staticmethod(make)
    __swig_destroy__ = _howto_swig.delete_flex_fir_cf
    __del__ = lambda self: None

    def set_mode(self, mode):
        """set_mode(flex_fir_cf self, int mode)"""
        return _howto_swig.flex_fir_cf_set_mode(self, mode)


    def mode(self):
        """mode(flex_fir_cf self) -> int"""
        return _howto_swig.flex_fir_cf_mode(self)


    def set_samp_rate(self, fs):
        """set_samp_rate(flex_fir_cf self, float fs)"""
        return _howto_swig.flex_fir_cf_set_samp_rate(self, fs)


    def samp_rate(self):
        """samp_rate(flex_fir_cf self) -> float"""
        return _howto_swig.flex_fir_cf_samp_rate(self)


    def set_f1(self, f):
        """set_f1(flex_fir_cf self, float f)"""
        return _howto_swig.flex_fir_cf_set_f1(self, f)


    def f1(self):
        """f1(flex_fir_cf self) -> float"""
        return _howto_swig.flex_fir_cf_f1(self)


    def set_f2(self, f):
        """set_f2(flex_fir_cf self, float f)"""
        return _howto_swig.flex_fir_cf_set_f2(self, f)


    def f2(self):
        """f2(flex_fir_cf self) -> float"""
        return _howto_swig.flex_fir_cf_f2(self)


    def set_width(self, w):
        """set_width(flex_fir_cf self, float w)"""
        return _howto_swig.flex_fir_cf_set_width(self, w)


    def width(self):
        """width(flex_fir_cf self) -> float"""
        return _howto_swig.flex_fir_cf_width(self)


    def set_gain(self, g):
        """set_gain(flex_fir_cf self, float g)"""
        return _howto_swig.flex_fir_cf_set_gain(self, g)


    def gain(self):
        """gain(flex_fir_cf self) -> float"""
        return _howto_swig.flex_fir_cf_gain(self)


    def taps(self):
        """taps(flex_fir_cf self) -> pmt_vector_float"""
        return _howto_swig.flex_fir_cf_taps(self)

flex_fir_cf_swigregister = _howto_swig.flex_fir_cf_swigregister
flex_fir_cf_swigregister(flex_fir_cf)

def flex_fir_cf_make(mode, samp_rate, f1, f2, width, gain):
    """flex_fir_cf_make(int mode, float samp_rate, float f1, float f2, float width, float gain) -> flex_fir_cf_sptr"""
    return _howto_swig.flex_fir_cf_make(mode, samp_rate, f1, f2, width, gain)

class flex_fir_cf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::howto::flex_fir_cf)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::howto::flex_fir_cf)> self) -> flex_fir_cf_sptr
        __init__(boost::shared_ptr<(gr::howto::flex_fir_cf)> self, flex_fir_cf p) -> flex_fir_cf_sptr
        """
        this = _howto_swig.new_flex_fir_cf_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(flex_fir_cf_sptr self) -> flex_fir_cf"""
        return _howto_swig.flex_fir_cf_sptr___deref__(self)

    __swig_destroy__ = _howto_swig.delete_flex_fir_cf_sptr
    __del__ = lambda self: None

    def make(self, mode, samp_rate, f1, f2, width, gain):
        """make(flex_fir_cf_sptr self, int mode, float samp_rate, float f1, float f2, float width, float gain) -> flex_fir_cf_sptr"""
        return _howto_swig.flex_fir_cf_sptr_make(self, mode, samp_rate, f1, f2, width, gain)


    def set_mode(self, mode):
        """set_mode(flex_fir_cf_sptr self, int mode)"""
        return _howto_swig.flex_fir_cf_sptr_set_mode(self, mode)


    def mode(self):
        """mode(flex_fir_cf_sptr self) -> int"""
        return _howto_swig.flex_fir_cf_sptr_mode(self)


    def set_samp_rate(self, fs):
        """set_samp_rate(flex_fir_cf_sptr self, float fs)"""
        return _howto_swig.flex_fir_cf_sptr_set_samp_rate(self, fs)


    def samp_rate(self):
        """samp_rate(flex_fir_cf_sptr self) -> float"""
        return _howto_swig.flex_fir_cf_sptr_samp_rate(self)


    def set_f1(self, f):
        """set_f1(flex_fir_cf_sptr self, float f)"""
        return _howto_swig.flex_fir_cf_sptr_set_f1(self, f)


    def f1(self):
        """f1(flex_fir_cf_sptr self) -> float"""
        return _howto_swig.flex_fir_cf_sptr_f1(self)


    def set_f2(self, f):
        """set_f2(flex_fir_cf_sptr self, float f)"""
        return _howto_swig.flex_fir_cf_sptr_set_f2(self, f)


    def f2(self):
        """f2(flex_fir_cf_sptr self) -> float"""
        return _howto_swig.flex_fir_cf_sptr_f2(self)


    def set_width(self, w):
        """set_width(flex_fir_cf_sptr self, float w)"""
        return _howto_swig.flex_fir_cf_sptr_set_width(self, w)


    def width(self):
        """width(flex_fir_cf_sptr self) -> float"""
        return _howto_swig.flex_fir_cf_sptr_width(self)


    def set_gain(self, g):
        """set_gain(flex_fir_cf_sptr self, float g)"""
        return _howto_swig.flex_fir_cf_sptr_set_gain(self, g)


    def gain(self):
        """gain(flex_fir_cf_sptr self) -> float"""
        return _howto_swig.flex_fir_cf_sptr_gain(self)


    def taps(self):
        """taps(flex_fir_cf_sptr self) -> pmt_vector_float"""
        return _howto_swig.flex_fir_cf_sptr_taps(self)


    def history(self):
        """history(flex_fir_cf_sptr self) -> unsigned int"""
        return _howto_swig.flex_fir_cf_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(flex_fir_cf_sptr self, int which, int delay)
        declare_sample_delay(flex_fir_cf_sptr self, unsigned int delay)
        """
        return _howto_swig.flex_fir_cf_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(flex_fir_cf_sptr self, int which) -> unsigned int"""
        return _howto_swig.flex_fir_cf_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(flex_fir_cf_sptr self) -> int"""
        return _howto_swig.flex_fir_cf_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(flex_fir_cf_sptr self) -> double"""
        return _howto_swig.flex_fir_cf_sptr_relative_rate(self)


    def start(self):
        """start(flex_fir_cf_sptr self) -> bool"""
        return _howto_swig.flex_fir_cf_sptr_start(self)


    def stop(self):
        """stop(flex_fir_cf_sptr self) -> bool"""
        return _howto_swig.flex_fir_cf_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(flex_fir_cf_sptr self, unsigned int which_input) -> uint64_t"""
        return _howto_swig.flex_fir_cf_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(flex_fir_cf_sptr self, unsigned int which_output) -> uint64_t"""
        return _howto_swig.flex_fir_cf_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(flex_fir_cf_sptr self) -> int"""
        return _howto_swig.flex_fir_cf_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(flex_fir_cf_sptr self, int m)"""
        return _howto_swig.flex_fir_cf_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(flex_fir_cf_sptr self)"""
        return _howto_swig.flex_fir_cf_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(flex_fir_cf_sptr self) -> bool"""
        return _howto_swig.flex_fir_cf_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(flex_fir_cf_sptr self, int m)"""
        return _howto_swig.flex_fir_cf_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(flex_fir_cf_sptr self) -> int"""
        return _howto_swig.flex_fir_cf_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(flex_fir_cf_sptr self, int i) -> long"""
        return _howto_swig.flex_fir_cf_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(flex_fir_cf_sptr self, long max_output_buffer)
        set_max_output_buffer(flex_fir_cf_sptr self, int port, long max_output_buffer)
        """
        return _howto_swig.flex_fir_cf_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(flex_fir_cf_sptr self, int i) -> long"""
        return _howto_swig.flex_fir_cf_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(flex_fir_cf_sptr self, long min_output_buffer)
        set_min_output_buffer(flex_fir_cf_sptr self, int port, long min_output_buffer)
        """
        return _howto_swig.flex_fir_cf_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(flex_fir_cf_sptr self) -> float"""
        return _howto_swig.flex_fir_cf_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(flex_fir_cf_sptr self) -> float"""
        return _howto_swig.flex_fir_cf_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(flex_fir_cf_sptr self) -> float"""
        return _howto_swig.flex_fir_cf_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(flex_fir_cf_sptr self) -> float"""
        return _howto_swig.flex_fir_cf_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(flex_fir_cf_sptr self) -> float"""
        return _howto_swig.flex_fir_cf_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(flex_fir_cf_sptr self) -> float"""
        return _howto_swig.flex_fir_cf_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(flex_fir_cf_sptr self, int which) -> float
        pc_input_buffers_full(flex_fir_cf_sptr self) -> pmt_vector_float
        """
        return _howto_swig.flex_fir_cf_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(flex_fir_cf_sptr self, int which) -> float
        pc_input_buffers_full_avg(flex_fir_cf_sptr self) -> pmt_vector_float
        """
        return _howto_swig.flex_fir_cf_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(flex_fir_cf_sptr self, int which) -> float
        pc_input_buffers_full_var(flex_fir_cf_sptr self) -> pmt_vector_float
        """
        return _howto_swig.flex_fir_cf_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(flex_fir_cf_sptr self, int which) -> float
        pc_output_buffers_full(flex_fir_cf_sptr self) -> pmt_vector_float
        """
        return _howto_swig.flex_fir_cf_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(flex_fir_cf_sptr self, int which) -> float
        pc_output_buffers_full_avg(flex_fir_cf_sptr self) -> pmt_vector_float
        """
        return _howto_swig.flex_fir_cf_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(flex_fir_cf_sptr self, int which) -> float
        pc_output_buffers_full_var(flex_fir_cf_sptr self) -> pmt_vector_float
        """
        return _howto_swig.flex_fir_cf_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(flex_fir_cf_sptr self) -> float"""
        return _howto_swig.flex_fir_cf_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(flex_fir_cf_sptr self) -> float"""
        return _howto_swig.flex_fir_cf_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(flex_fir_cf_sptr self) -> float"""
        return _howto_swig.flex_fir_cf_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(flex_fir_cf_sptr self) -> float"""
        return _howto_swig.flex_fir_cf_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(flex_fir_cf_sptr self) -> float"""
        return _howto_swig.flex_fir_cf_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(flex_fir_cf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _howto_swig.flex_fir_cf_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(flex_fir_cf_sptr self)"""
        return _howto_swig.flex_fir_cf_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(flex_fir_cf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _howto_swig.flex_fir_cf_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(flex_fir_cf_sptr self) -> int"""
        return _howto_swig.flex_fir_cf_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(flex_fir_cf_sptr self) -> int"""
        return _howto_swig.flex_fir_cf_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(flex_fir_cf_sptr self, int priority) -> int"""
        return _howto_swig.flex_fir_cf_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(flex_fir_cf_sptr self) -> std::string"""
        return _howto_swig.flex_fir_cf_sptr_name(self)


    def symbol_name(self):
        """symbol_name(flex_fir_cf_sptr self) -> std::string"""
        return _howto_swig.flex_fir_cf_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(flex_fir_cf_sptr self) -> io_signature_sptr"""
        return _howto_swig.flex_fir_cf_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(flex_fir_cf_sptr self) -> io_signature_sptr"""
        return _howto_swig.flex_fir_cf_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(flex_fir_cf_sptr self) -> long"""
        return _howto_swig.flex_fir_cf_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(flex_fir_cf_sptr self) -> basic_block_sptr"""
        return _howto_swig.flex_fir_cf_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(flex_fir_cf_sptr self, int ninputs, int noutputs) -> bool"""
        return _howto_swig.flex_fir_cf_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(flex_fir_cf_sptr self) -> std::string"""
        return _howto_swig.flex_fir_cf_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(flex_fir_cf_sptr self, std::string name)"""
        return _howto_swig.flex_fir_cf_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(flex_fir_cf_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _howto_swig.flex_fir_cf_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(flex_fir_cf_sptr self) -> swig_int_ptr"""
        return _howto_swig.flex_fir_cf_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(flex_fir_cf_sptr self) -> swig_int_ptr"""
        return _howto_swig.flex_fir_cf_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(flex_fir_cf_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _howto_swig.flex_fir_cf_sptr_message_subscribers(self, which_port)

flex_fir_cf_sptr_swigregister = _howto_swig.flex_fir_cf_sptr_swigregister
flex_fir_cf_sptr_swigregister(flex_fir_cf_sptr)


flex_fir_cf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
flex_fir_cf = flex_fir_cf.make;

class downsample_cc(object):
    """Proxy of C++ gr::howto::downsample_cc class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(decim):
        """make(int decim) -> downsample_cc_sptr"""
        return _howto_swig.downsample_cc_make(decim)

    make = staticmethod(make)

    def decimation(self):
        """decimation(downsample_cc self) -> int"""
        return _howto_swig.downsample_cc_decimation(self)

    __swig_destroy__ = _howto_swig.delete_downsample_cc
    __del__ = lambda self: None
downsample_cc_swigregister = _howto_swig.downsample_cc_swigregister
downsample_cc_swigregister(downsample_cc)

def downsample_cc_make(decim):
    """downsample_cc_make(int decim) -> downsample_cc_sptr"""
    return _howto_swig.downsample_cc_make(decim)

class downsample_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::howto::downsample_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::howto::downsample_cc)> self) -> downsample_cc_sptr
        __init__(boost::shared_ptr<(gr::howto::downsample_cc)> self, downsample_cc p) -> downsample_cc_sptr
        """
        this = _howto_swig.new_downsample_cc_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(downsample_cc_sptr self) -> downsample_cc"""
        return _howto_swig.downsample_cc_sptr___deref__(self)

    __swig_destroy__ = _howto_swig.delete_downsample_cc_sptr
    __del__ = lambda self: None

    def make(self, decim):
        """make(downsample_cc_sptr self, int decim) -> downsample_cc_sptr"""
        return _howto_swig.downsample_cc_sptr_make(self, decim)


    def decimation(self):
        """decimation(downsample_cc_sptr self) -> int"""
        return _howto_swig.downsample_cc_sptr_decimation(self)


    def history(self):
        """history(downsample_cc_sptr self) -> unsigned int"""
        return _howto_swig.downsample_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(downsample_cc_sptr self, int which, int delay)
        declare_sample_delay(downsample_cc_sptr self, unsigned int delay)
        """
        return _howto_swig.downsample_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(downsample_cc_sptr self, int which) -> unsigned int"""
        return _howto_swig.downsample_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(downsample_cc_sptr self) -> int"""
        return _howto_swig.downsample_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(downsample_cc_sptr self) -> double"""
        return _howto_swig.downsample_cc_sptr_relative_rate(self)


    def start(self):
        """start(downsample_cc_sptr self) -> bool"""
        return _howto_swig.downsample_cc_sptr_start(self)


    def stop(self):
        """stop(downsample_cc_sptr self) -> bool"""
        return _howto_swig.downsample_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(downsample_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _howto_swig.downsample_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(downsample_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _howto_swig.downsample_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(downsample_cc_sptr self) -> int"""
        return _howto_swig.downsample_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(downsample_cc_sptr self, int m)"""
        return _howto_swig.downsample_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(downsample_cc_sptr self)"""
        return _howto_swig.downsample_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(downsample_cc_sptr self) -> bool"""
        return _howto_swig.downsample_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(downsample_cc_sptr self, int m)"""
        return _howto_swig.downsample_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(downsample_cc_sptr self) -> int"""
        return _howto_swig.downsample_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(downsample_cc_sptr self, int i) -> long"""
        return _howto_swig.downsample_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(downsample_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(downsample_cc_sptr self, int port, long max_output_buffer)
        """
        return _howto_swig.downsample_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(downsample_cc_sptr self, int i) -> long"""
        return _howto_swig.downsample_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(downsample_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(downsample_cc_sptr self, int port, long min_output_buffer)
        """
        return _howto_swig.downsample_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(downsample_cc_sptr self) -> float"""
        return _howto_swig.downsample_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(downsample_cc_sptr self) -> float"""
        return _howto_swig.downsample_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(downsample_cc_sptr self) -> float"""
        return _howto_swig.downsample_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(downsample_cc_sptr self) -> float"""
        return _howto_swig.downsample_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(downsample_cc_sptr self) -> float"""
        return _howto_swig.downsample_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(downsample_cc_sptr self) -> float"""
        return _howto_swig.downsample_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(downsample_cc_sptr self, int which) -> float
        pc_input_buffers_full(downsample_cc_sptr self) -> pmt_vector_float
        """
        return _howto_swig.downsample_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(downsample_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(downsample_cc_sptr self) -> pmt_vector_float
        """
        return _howto_swig.downsample_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(downsample_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(downsample_cc_sptr self) -> pmt_vector_float
        """
        return _howto_swig.downsample_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(downsample_cc_sptr self, int which) -> float
        pc_output_buffers_full(downsample_cc_sptr self) -> pmt_vector_float
        """
        return _howto_swig.downsample_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(downsample_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(downsample_cc_sptr self) -> pmt_vector_float
        """
        return _howto_swig.downsample_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(downsample_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(downsample_cc_sptr self) -> pmt_vector_float
        """
        return _howto_swig.downsample_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(downsample_cc_sptr self) -> float"""
        return _howto_swig.downsample_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(downsample_cc_sptr self) -> float"""
        return _howto_swig.downsample_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(downsample_cc_sptr self) -> float"""
        return _howto_swig.downsample_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(downsample_cc_sptr self) -> float"""
        return _howto_swig.downsample_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(downsample_cc_sptr self) -> float"""
        return _howto_swig.downsample_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(downsample_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _howto_swig.downsample_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(downsample_cc_sptr self)"""
        return _howto_swig.downsample_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(downsample_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _howto_swig.downsample_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(downsample_cc_sptr self) -> int"""
        return _howto_swig.downsample_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(downsample_cc_sptr self) -> int"""
        return _howto_swig.downsample_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(downsample_cc_sptr self, int priority) -> int"""
        return _howto_swig.downsample_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(downsample_cc_sptr self) -> std::string"""
        return _howto_swig.downsample_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(downsample_cc_sptr self) -> std::string"""
        return _howto_swig.downsample_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(downsample_cc_sptr self) -> io_signature_sptr"""
        return _howto_swig.downsample_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(downsample_cc_sptr self) -> io_signature_sptr"""
        return _howto_swig.downsample_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(downsample_cc_sptr self) -> long"""
        return _howto_swig.downsample_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(downsample_cc_sptr self) -> basic_block_sptr"""
        return _howto_swig.downsample_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(downsample_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _howto_swig.downsample_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(downsample_cc_sptr self) -> std::string"""
        return _howto_swig.downsample_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(downsample_cc_sptr self, std::string name)"""
        return _howto_swig.downsample_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(downsample_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _howto_swig.downsample_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(downsample_cc_sptr self) -> swig_int_ptr"""
        return _howto_swig.downsample_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(downsample_cc_sptr self) -> swig_int_ptr"""
        return _howto_swig.downsample_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(downsample_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _howto_swig.downsample_cc_sptr_message_subscribers(self, which_port)

downsample_cc_sptr_swigregister = _howto_swig.downsample_cc_sptr_swigregister
downsample_cc_sptr_swigregister(downsample_cc_sptr)


downsample_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
downsample_cc = downsample_cc.make;

class decimate_fir_cc(object):
    """Proxy of C++ gr::howto::decimate_fir_cc class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(decim, samp_rate, cutoff, transition, window, kaiser_beta):
        """make(int decim, double samp_rate, double cutoff, double transition, int window, double kaiser_beta) -> decimate_fir_cc_sptr"""
        return _howto_swig.decimate_fir_cc_make(decim, samp_rate, cutoff, transition, window, kaiser_beta)

    make = staticmethod(make)

    def decimation(self):
        """decimation(decimate_fir_cc self) -> int"""
        return _howto_swig.decimate_fir_cc_decimation(self)


    def samp_rate(self):
        """samp_rate(decimate_fir_cc self) -> double"""
        return _howto_swig.decimate_fir_cc_samp_rate(self)


    def cutoff(self):
        """cutoff(decimate_fir_cc self) -> double"""
        return _howto_swig.decimate_fir_cc_cutoff(self)


    def transition(self):
        """transition(decimate_fir_cc self) -> double"""
        return _howto_swig.decimate_fir_cc_transition(self)


    def window(self):
        """window(decimate_fir_cc self) -> int"""
        return _howto_swig.decimate_fir_cc_window(self)


    def kaiser_beta(self):
        """kaiser_beta(decimate_fir_cc self) -> double"""
        return _howto_swig.decimate_fir_cc_kaiser_beta(self)


    def set_decimation(self, decim):
        """set_decimation(decimate_fir_cc self, int decim)"""
        return _howto_swig.decimate_fir_cc_set_decimation(self, decim)


    def set_samp_rate(self, fs):
        """set_samp_rate(decimate_fir_cc self, double fs)"""
        return _howto_swig.decimate_fir_cc_set_samp_rate(self, fs)


    def set_cutoff(self, fc):
        """set_cutoff(decimate_fir_cc self, double fc)"""
        return _howto_swig.decimate_fir_cc_set_cutoff(self, fc)


    def set_transition(self, tw):
        """set_transition(decimate_fir_cc self, double tw)"""
        return _howto_swig.decimate_fir_cc_set_transition(self, tw)


    def set_window(self, w):
        """set_window(decimate_fir_cc self, int w)"""
        return _howto_swig.decimate_fir_cc_set_window(self, w)


    def set_kaiser_beta(self, beta):
        """set_kaiser_beta(decimate_fir_cc self, double beta)"""
        return _howto_swig.decimate_fir_cc_set_kaiser_beta(self, beta)

    __swig_destroy__ = _howto_swig.delete_decimate_fir_cc
    __del__ = lambda self: None
decimate_fir_cc_swigregister = _howto_swig.decimate_fir_cc_swigregister
decimate_fir_cc_swigregister(decimate_fir_cc)

def decimate_fir_cc_make(decim, samp_rate, cutoff, transition, window, kaiser_beta):
    """decimate_fir_cc_make(int decim, double samp_rate, double cutoff, double transition, int window, double kaiser_beta) -> decimate_fir_cc_sptr"""
    return _howto_swig.decimate_fir_cc_make(decim, samp_rate, cutoff, transition, window, kaiser_beta)

class decimate_fir_cc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::howto::decimate_fir_cc)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::howto::decimate_fir_cc)> self) -> decimate_fir_cc_sptr
        __init__(boost::shared_ptr<(gr::howto::decimate_fir_cc)> self, decimate_fir_cc p) -> decimate_fir_cc_sptr
        """
        this = _howto_swig.new_decimate_fir_cc_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(decimate_fir_cc_sptr self) -> decimate_fir_cc"""
        return _howto_swig.decimate_fir_cc_sptr___deref__(self)

    __swig_destroy__ = _howto_swig.delete_decimate_fir_cc_sptr
    __del__ = lambda self: None

    def make(self, decim, samp_rate, cutoff, transition, window, kaiser_beta):
        """make(decimate_fir_cc_sptr self, int decim, double samp_rate, double cutoff, double transition, int window, double kaiser_beta) -> decimate_fir_cc_sptr"""
        return _howto_swig.decimate_fir_cc_sptr_make(self, decim, samp_rate, cutoff, transition, window, kaiser_beta)


    def decimation(self):
        """decimation(decimate_fir_cc_sptr self) -> int"""
        return _howto_swig.decimate_fir_cc_sptr_decimation(self)


    def samp_rate(self):
        """samp_rate(decimate_fir_cc_sptr self) -> double"""
        return _howto_swig.decimate_fir_cc_sptr_samp_rate(self)


    def cutoff(self):
        """cutoff(decimate_fir_cc_sptr self) -> double"""
        return _howto_swig.decimate_fir_cc_sptr_cutoff(self)


    def transition(self):
        """transition(decimate_fir_cc_sptr self) -> double"""
        return _howto_swig.decimate_fir_cc_sptr_transition(self)


    def window(self):
        """window(decimate_fir_cc_sptr self) -> int"""
        return _howto_swig.decimate_fir_cc_sptr_window(self)


    def kaiser_beta(self):
        """kaiser_beta(decimate_fir_cc_sptr self) -> double"""
        return _howto_swig.decimate_fir_cc_sptr_kaiser_beta(self)


    def set_decimation(self, decim):
        """set_decimation(decimate_fir_cc_sptr self, int decim)"""
        return _howto_swig.decimate_fir_cc_sptr_set_decimation(self, decim)


    def set_samp_rate(self, fs):
        """set_samp_rate(decimate_fir_cc_sptr self, double fs)"""
        return _howto_swig.decimate_fir_cc_sptr_set_samp_rate(self, fs)


    def set_cutoff(self, fc):
        """set_cutoff(decimate_fir_cc_sptr self, double fc)"""
        return _howto_swig.decimate_fir_cc_sptr_set_cutoff(self, fc)


    def set_transition(self, tw):
        """set_transition(decimate_fir_cc_sptr self, double tw)"""
        return _howto_swig.decimate_fir_cc_sptr_set_transition(self, tw)


    def set_window(self, w):
        """set_window(decimate_fir_cc_sptr self, int w)"""
        return _howto_swig.decimate_fir_cc_sptr_set_window(self, w)


    def set_kaiser_beta(self, beta):
        """set_kaiser_beta(decimate_fir_cc_sptr self, double beta)"""
        return _howto_swig.decimate_fir_cc_sptr_set_kaiser_beta(self, beta)


    def history(self):
        """history(decimate_fir_cc_sptr self) -> unsigned int"""
        return _howto_swig.decimate_fir_cc_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(decimate_fir_cc_sptr self, int which, int delay)
        declare_sample_delay(decimate_fir_cc_sptr self, unsigned int delay)
        """
        return _howto_swig.decimate_fir_cc_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(decimate_fir_cc_sptr self, int which) -> unsigned int"""
        return _howto_swig.decimate_fir_cc_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(decimate_fir_cc_sptr self) -> int"""
        return _howto_swig.decimate_fir_cc_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(decimate_fir_cc_sptr self) -> double"""
        return _howto_swig.decimate_fir_cc_sptr_relative_rate(self)


    def start(self):
        """start(decimate_fir_cc_sptr self) -> bool"""
        return _howto_swig.decimate_fir_cc_sptr_start(self)


    def stop(self):
        """stop(decimate_fir_cc_sptr self) -> bool"""
        return _howto_swig.decimate_fir_cc_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(decimate_fir_cc_sptr self, unsigned int which_input) -> uint64_t"""
        return _howto_swig.decimate_fir_cc_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(decimate_fir_cc_sptr self, unsigned int which_output) -> uint64_t"""
        return _howto_swig.decimate_fir_cc_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(decimate_fir_cc_sptr self) -> int"""
        return _howto_swig.decimate_fir_cc_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(decimate_fir_cc_sptr self, int m)"""
        return _howto_swig.decimate_fir_cc_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(decimate_fir_cc_sptr self)"""
        return _howto_swig.decimate_fir_cc_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(decimate_fir_cc_sptr self) -> bool"""
        return _howto_swig.decimate_fir_cc_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(decimate_fir_cc_sptr self, int m)"""
        return _howto_swig.decimate_fir_cc_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(decimate_fir_cc_sptr self) -> int"""
        return _howto_swig.decimate_fir_cc_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(decimate_fir_cc_sptr self, int i) -> long"""
        return _howto_swig.decimate_fir_cc_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(decimate_fir_cc_sptr self, long max_output_buffer)
        set_max_output_buffer(decimate_fir_cc_sptr self, int port, long max_output_buffer)
        """
        return _howto_swig.decimate_fir_cc_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(decimate_fir_cc_sptr self, int i) -> long"""
        return _howto_swig.decimate_fir_cc_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(decimate_fir_cc_sptr self, long min_output_buffer)
        set_min_output_buffer(decimate_fir_cc_sptr self, int port, long min_output_buffer)
        """
        return _howto_swig.decimate_fir_cc_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(decimate_fir_cc_sptr self) -> float"""
        return _howto_swig.decimate_fir_cc_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(decimate_fir_cc_sptr self) -> float"""
        return _howto_swig.decimate_fir_cc_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(decimate_fir_cc_sptr self) -> float"""
        return _howto_swig.decimate_fir_cc_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(decimate_fir_cc_sptr self) -> float"""
        return _howto_swig.decimate_fir_cc_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(decimate_fir_cc_sptr self) -> float"""
        return _howto_swig.decimate_fir_cc_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(decimate_fir_cc_sptr self) -> float"""
        return _howto_swig.decimate_fir_cc_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(decimate_fir_cc_sptr self, int which) -> float
        pc_input_buffers_full(decimate_fir_cc_sptr self) -> pmt_vector_float
        """
        return _howto_swig.decimate_fir_cc_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(decimate_fir_cc_sptr self, int which) -> float
        pc_input_buffers_full_avg(decimate_fir_cc_sptr self) -> pmt_vector_float
        """
        return _howto_swig.decimate_fir_cc_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(decimate_fir_cc_sptr self, int which) -> float
        pc_input_buffers_full_var(decimate_fir_cc_sptr self) -> pmt_vector_float
        """
        return _howto_swig.decimate_fir_cc_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(decimate_fir_cc_sptr self, int which) -> float
        pc_output_buffers_full(decimate_fir_cc_sptr self) -> pmt_vector_float
        """
        return _howto_swig.decimate_fir_cc_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(decimate_fir_cc_sptr self, int which) -> float
        pc_output_buffers_full_avg(decimate_fir_cc_sptr self) -> pmt_vector_float
        """
        return _howto_swig.decimate_fir_cc_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(decimate_fir_cc_sptr self, int which) -> float
        pc_output_buffers_full_var(decimate_fir_cc_sptr self) -> pmt_vector_float
        """
        return _howto_swig.decimate_fir_cc_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(decimate_fir_cc_sptr self) -> float"""
        return _howto_swig.decimate_fir_cc_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(decimate_fir_cc_sptr self) -> float"""
        return _howto_swig.decimate_fir_cc_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(decimate_fir_cc_sptr self) -> float"""
        return _howto_swig.decimate_fir_cc_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(decimate_fir_cc_sptr self) -> float"""
        return _howto_swig.decimate_fir_cc_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(decimate_fir_cc_sptr self) -> float"""
        return _howto_swig.decimate_fir_cc_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(decimate_fir_cc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _howto_swig.decimate_fir_cc_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(decimate_fir_cc_sptr self)"""
        return _howto_swig.decimate_fir_cc_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(decimate_fir_cc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _howto_swig.decimate_fir_cc_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(decimate_fir_cc_sptr self) -> int"""
        return _howto_swig.decimate_fir_cc_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(decimate_fir_cc_sptr self) -> int"""
        return _howto_swig.decimate_fir_cc_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(decimate_fir_cc_sptr self, int priority) -> int"""
        return _howto_swig.decimate_fir_cc_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(decimate_fir_cc_sptr self) -> std::string"""
        return _howto_swig.decimate_fir_cc_sptr_name(self)


    def symbol_name(self):
        """symbol_name(decimate_fir_cc_sptr self) -> std::string"""
        return _howto_swig.decimate_fir_cc_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(decimate_fir_cc_sptr self) -> io_signature_sptr"""
        return _howto_swig.decimate_fir_cc_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(decimate_fir_cc_sptr self) -> io_signature_sptr"""
        return _howto_swig.decimate_fir_cc_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(decimate_fir_cc_sptr self) -> long"""
        return _howto_swig.decimate_fir_cc_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(decimate_fir_cc_sptr self) -> basic_block_sptr"""
        return _howto_swig.decimate_fir_cc_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(decimate_fir_cc_sptr self, int ninputs, int noutputs) -> bool"""
        return _howto_swig.decimate_fir_cc_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(decimate_fir_cc_sptr self) -> std::string"""
        return _howto_swig.decimate_fir_cc_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(decimate_fir_cc_sptr self, std::string name)"""
        return _howto_swig.decimate_fir_cc_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(decimate_fir_cc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _howto_swig.decimate_fir_cc_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(decimate_fir_cc_sptr self) -> swig_int_ptr"""
        return _howto_swig.decimate_fir_cc_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(decimate_fir_cc_sptr self) -> swig_int_ptr"""
        return _howto_swig.decimate_fir_cc_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(decimate_fir_cc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _howto_swig.decimate_fir_cc_sptr_message_subscribers(self, which_port)

decimate_fir_cc_sptr_swigregister = _howto_swig.decimate_fir_cc_sptr_swigregister
decimate_fir_cc_sptr_swigregister(decimate_fir_cc_sptr)


decimate_fir_cc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
decimate_fir_cc = decimate_fir_cc.make;



